### `backend\app.py`

```python
import os
import json
import csv
import logging
from decimal import Decimal
from datetime import datetime
from functools import wraps

import numpy as np
import pandas as pd
import joblib
import tensorflow as tf 
from tensorflow.keras.models import load_model 

from flask import Flask, jsonify, request
from flask_cors import CORS, cross_origin
from flask_bcrypt import Bcrypt
from flask_jwt_extended import (
    JWTManager, create_access_token,
    jwt_required, get_jwt_identity, get_jwt
)
from werkzeug.exceptions import HTTPException
from sqlalchemy import or_, func

from database import db
from models import Role, User, Vehicle, CartItem, Order, OrderItem, Review


app = Flask(__name__)
CORS(app, resources={r"/api/*": {"origins": "http://localhost:5173"}}, supports_credentials=True)

app.logger.setLevel(logging.DEBUG)
handler = logging.StreamHandler()
handler.setFormatter(logging.Formatter('%(asctime)s - %(levelname)s - %(message)s'))
app.logger.handlers = [handler] 

app.logger.info("Flask application logger configured.")

# config
app.config['SQLALCHEMY_DATABASE_URI'] = os.environ.get(
    'DATABASE_URL',
    'mysql+pymysql://root:PisyaMorja123@localhost/db_name'
)
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
app.config['JWT_SECRET_KEY'] = os.environ.get(
    'JWT_SECRET_KEY',
    'your-super-secret-fallback-key-for-admin-panel'
)

db.init_app(app)
bcrypt = Bcrypt(app)
jwt = JWTManager(app)

ARTIFACTS_PATH = os.path.join(os.path.dirname(__file__), 'models', 'recommendation_artifacts_csv.joblib')
if os.path.exists(ARTIFACTS_PATH):
    try:
        art = joblib.load(ARTIFACTS_PATH)
        app.logger.info(f"Loaded CF artifacts from {ARTIFACTS_PATH}")
    except Exception as e:
        app.logger.error(f"Failed loading CF artifacts: {e}", exc_info=True)
        art = {}
else:
    app.logger.error(f"CF artifacts not found at {ARTIFACTS_PATH}")
    art = {}

user_knn = art.get('user_knn')
item_knn = art.get('item_knn')
item_pipeline = art.get('item_pipeline')
train_centered_idx = art.get('train_centered_index')
train_centered_cols = art.get('train_centered_columns')
user_means = art.get('user_means', {})
user_history = art.get('user_rated_history', {})
X_items_index = art.get('X_items_df_index', [])
X_items_used_cat_features = art.get('X_items_df_used_cat_features', [])
X_items_used_num_features = art.get('X_items_df_used_num_features', [])
X_ITEMS_PIPELINE_COLS = X_items_used_cat_features + X_items_used_num_features
TOP_MODELS_FOR_GROUPING = art.get('top_models_for_grouping', [])
global_mean = art.get('global_mean_rating', 3.0)
MIN_RATING = art.get('MIN_RATING', 1.0)
MAX_RATING = art.get('MAX_RATING', 5.0)
best_alpha = art.get('best_alpha_hybrid', 0.5)

app.logger.info(f"Type of user_knn after loading: {type(user_knn)}")


BASE_DIR        = os.path.dirname(os.path.abspath(__file__))
MODELS_DIR      = os.path.join(BASE_DIR, 'models')
SAVED_DIR       = os.path.join(BASE_DIR, 'saved_recommender')

tf_user_ids = []
tf_item_ids = []
item_embeddings_norm = None
user_lookup = None
user_model = None

try:
    with open(os.path.join(MODELS_DIR, 'user_ids.json'), 'r', encoding='utf-8') as f:
        tf_user_ids = json.load(f)
    with open(os.path.join(MODELS_DIR, 'item_ids.json'), 'r', encoding='utf-8') as f:
        tf_item_ids = json.load(f)

    item_embeddings_path = os.path.join(MODELS_DIR, 'item_embeddings.npy')
    if os.path.exists(item_embeddings_path):
        item_embeddings = np.load(item_embeddings_path)
        _norms = np.linalg.norm(item_embeddings, axis=1, keepdims=True)
        item_embeddings_norm = item_embeddings / (_norms + 1e-10)
        app.logger.info("Loaded TF item embeddings.")
    else:
        app.logger.error(f"TF item_embeddings.npy not found at {item_embeddings_path}")


    if tf_user_ids:
        user_lookup   = tf.keras.layers.StringLookup(vocabulary=tf_user_ids, mask_token=None)
        user_model_path = os.path.join(SAVED_DIR, 'user_model.h5')
        if os.path.exists(user_model_path):
            user_model    = load_model(user_model_path, compile=False)
            app.logger.info("Loaded TF user model and lookup.")
        else:
            app.logger.error(f"TF user_model.h5 not found at {user_model_path}")
    else:
        app.logger.error("TF user_ids not loaded, cannot initialize user_lookup and user_model.")

except FileNotFoundError as fnf_error:
    app.logger.error(f"TF Model loading error: File not found - {fnf_error}", exc_info=True)
except Exception as e:
    app.logger.error(f"General error loading TF Model components: {e}", exc_info=True)

# Инициализация БД и загрузка данных
with app.app_context():
    app.logger.info("Application context entered for DB setup.")
    db.create_all()
    app.logger.info("db.create_all() called (creates tables if they don't exist).")

    user_role_created = False
    admin_role_created = False
    if not Role.query.filter_by(name='user').first():
        app.logger.info("Default 'user' role not found, creating it.")
        db.session.add(Role(name='user'))
        user_role_created = True
    if not Role.query.filter_by(name='admin').first():
        app.logger.info("Default 'admin' role not found, creating it.")
        db.session.add(Role(name='admin'))
        admin_role_created = True

    if db.session.new:
        db.session.commit()
        app.logger.info("Default roles committed if they were created.")
    else:
        app.logger.info("Default roles already existed or no new roles were added.")
    if not Vehicle.query.first():
        app.logger.info("No vehicles found in DB, attempting to load from CSV.")
        csv_path = os.path.join(os.path.dirname(__file__), 'data', 'project_vehicle_dataset.csv')
        if os.path.exists(csv_path):
            app.logger.info(f"Vehicles CSV file found at {csv_path}.")
            try:
                with open(csv_path, newline='', encoding='utf-8') as f:
                    reader = csv.DictReader(f)
                    vehicles_to_add = []
                    required_cols_for_value_check = ['vehicle_id', 'brand', 'body_type', 'year', 'gearbox', 'drive', 'power_hp', 'seats', 'price_per_day_usd']
                    for row_num, row in enumerate(reader):
                        try:
                            if not all(col in row and str(row[col]).strip() for col in required_cols_for_value_check):
                                app.logger.warning(f"App CSV Load: Missing required data in row {row_num+1}. Skipping. Row: {row}")
                                continue
                            vehicle_id_str = str(row['vehicle_id']).strip()
                            image_url_val = str(row.get('image', '')).strip()
                            if not image_url_val or image_url_val.lower() == 'n/a': image_url_val = None
                            model_val = str(row.get('model', '')).strip()
                            if not model_val: model_val = None
                            v = Vehicle(
                                vehicle_id=vehicle_id_str, brand=str(row['brand']).strip(), model=model_val,
                                body_type=str(row['body_type']).strip(), year=int(row['year']),
                                gearbox=str(row['gearbox']).strip(), drive=str(row['drive']).strip(),
                                power_hp=int(row['power_hp']), seats=int(row['seats']),
                                price_per_day_usd=Decimal(row['price_per_day_usd']), image_url=image_url_val
                            )
                            vehicles_to_add.append(v)
                        except KeyError as ke: app.logger.error(f"App CSV Load Error: Missing key {ke} in row {row_num+1}: {row}")
                        except ValueError as ve: app.logger.error(f"App CSV Load Error: Value error {ve} in row {row_num+1}: {row}")
                        except Exception as e_inner: app.logger.error(f"App CSV Load: Generic error in row {row_num+1}: {e_inner}. Row: {row}", exc_info=True)
                    if vehicles_to_add:
                        db.session.bulk_save_objects(vehicles_to_add); db.session.commit()
                        app.logger.info(f"{len(vehicles_to_add)} vehicles loaded from CSV into app DB and committed.")
                    else: app.logger.info("No new vehicles to add from CSV (or all rows had errors) during app startup.")
            except Exception as e:
                app.logger.error(f"Error loading vehicles from CSV during app startup: {e}", exc_info=True)
                db.session.rollback()
        else: app.logger.warning(f"Vehicles CSV file not found at {csv_path} during app startup.")
    else: app.logger.info("Vehicles already exist in the database, skipping CSV load during app startup.")

# Обратные вызоы JWT
@jwt.expired_token_loader
def expired_token_callback(jwt_header, jwt_payload):
    return jsonify(msg="Token has expired", error_code="TOKEN_EXPIRED"), 401

@jwt.invalid_token_loader
def invalid_token_callback(err_string): # param name from target (err) or user (error_string)
    return jsonify(msg=f"Invalid Token: {err_string}", error_code="INVALID_TOKEN"), 422

@jwt.unauthorized_loader
def missing_token_callback(err_string): # param name from target (err) or user (error_string)
    return jsonify(msg=f"Authorization Required: {err_string}", error_code="AUTH_REQUIRED"), 401 # user had AUTHORIZATION_REQUIRED

@jwt.needs_fresh_token_loader
def fresh_token_callback(jwt_header, jwt_data): # user had token_not_fresh_callback
    return jsonify(msg="Fresh token required", error_code="FRESH_TOKEN_REQUIRED"), 401


# Использование пользователя для улучшения обработки журнала
def get_current_user_id():
    jwt_user_id_str = get_jwt_identity()
    try:
        return int(jwt_user_id_str)
    except (ValueError, TypeError):
        app.logger.error(f"Invalid JWT identity: '{jwt_user_id_str}'. Cannot convert to int.")
        raise ValueError(f"Invalid user identity in token: {jwt_user_id_str}")

def admin_required(fn):
    @wraps(fn)
    @jwt_required()
    def wrapper(*args, **kwargs):
        current_user_claims = get_jwt()
        user_role = current_user_claims.get('role')
        if user_role != 'admin':
            user_id_for_log = get_jwt_identity() 
            app.logger.warning(f"Admin access denied for user ID: {user_id_for_log}. Role in token: '{user_role}'")
            return jsonify(msg="Administration rights required."), 403 
        return fn(*args, **kwargs)
    return wrapper

# Функции прогнозирования (пользователя)
def predict_user_cf_revised(user_id, vehicle_id_to_predict_str, current_user_actual_history=None):
    user_specific_mean = user_means.get(user_id, global_mean) if user_means is not None else global_mean
    if user_knn is None or train_centered_idx is None or user_id not in train_centered_idx or train_centered_cols is None:
        return user_specific_mean
    user_ratings_for_train_items = pd.Series(0.0, index=train_centered_cols)
    hist_to_use = current_user_actual_history if current_user_actual_history is not None else user_history.get(user_id, {})
    for item_id_hist_str, rating_hist in hist_to_use.items():
        if item_id_hist_str in train_centered_cols:
            try: user_ratings_for_train_items[item_id_hist_str] = float(rating_hist) - user_specific_mean
            except (ValueError, TypeError): pass
    centered_user_vector_values = user_ratings_for_train_items.values
    if not np.any(centered_user_vector_values): return user_specific_mean
    try:
        num_samples_fit = user_knn.n_samples_fit_
        k_neighbors = min(user_knn.n_neighbors, num_samples_fit -1 if num_samples_fit > 1 else 0)
        if k_neighbors <= 0 : return user_specific_mean
        distances, neighbor_indices_flat = user_knn.kneighbors(centered_user_vector_values.reshape(1, -1), n_neighbors=k_neighbors)
        neighbor_indices_flat = neighbor_indices_flat.flatten()
    except Exception as e:
        app.logger.error(f"UCF: Error in kneighbors for user {user_id}, item '{vehicle_id_to_predict_str}': {e}", exc_info=True)
        return user_specific_mean
    similarities = 1.0 - distances.flatten()
    valid_neighbor_indices = [idx for idx in neighbor_indices_flat if 0 <= idx < len(train_centered_idx)]
    neighbor_user_ids_from_idx = [train_centered_idx[i] for i in valid_neighbor_indices]
    similarities = np.array([sim for i, sim in enumerate(similarities) if neighbor_indices_flat[i] in valid_neighbor_indices])
    numerator = 0.0
    denominator = 0.0
    for sim_score, neighbor_uid in zip(similarities, neighbor_user_ids_from_idx):
        if sim_score <= 1e-6: continue
        neighbor_hist_artifact = user_history.get(neighbor_uid, {})
        neighbor_rating_for_item = neighbor_hist_artifact.get(vehicle_id_to_predict_str)
        if neighbor_rating_for_item is not None:
            try:
                neighbor_rating_val = float(neighbor_rating_for_item)
                neighbor_mean_rating = user_means.get(neighbor_uid, global_mean) if user_means is not None else global_mean
                numerator += sim_score * (neighbor_rating_val - neighbor_mean_rating)
                denominator += sim_score
            except (ValueError, TypeError): pass
    if denominator < 1e-6 : return user_specific_mean
    predicted_rating = user_specific_mean + (numerator / denominator)
    return np.clip(predicted_rating, MIN_RATING, MAX_RATING)

def predict_content_cf_revised(user_id, vehicle_id_to_predict_str, current_user_actual_history=None):
    user_specific_mean = user_means.get(user_id, global_mean) if user_means is not None else global_mean
    if item_knn is None or item_pipeline is None or X_items_index is None or not X_ITEMS_PIPELINE_COLS:
        return user_specific_mean
    target_vehicle = db.session.get(Vehicle, vehicle_id_to_predict_str)
    if not target_vehicle: return user_specific_mean
    item_features_dict = {}
    for feature_name in X_ITEMS_PIPELINE_COLS:
        if feature_name == 'model_grouped':
            raw_model_value = getattr(target_vehicle, 'model', None)
            item_features_dict['model_grouped'] = raw_model_value if raw_model_value and raw_model_value in TOP_MODELS_FOR_GROUPING else 'Other_Model'
        else: item_features_dict[feature_name] = getattr(target_vehicle, feature_name, None)
    try:
        item_features_df = pd.DataFrame([item_features_dict])[X_ITEMS_PIPELINE_COLS]
        transformed_item_vector = item_pipeline.transform(item_features_df)
    except Exception as e:
        app.logger.error(f"CCF: Error in item_pipeline.transform for vehicle '{vehicle_id_to_predict_str}': {e}", exc_info=True)
        app.logger.error(f"CCF: Features passed to pipeline: {item_features_dict}")
        return user_specific_mean
    num_items_for_knn = len(X_items_index) if X_items_index is not None else 0
    desired_k_for_query = (item_knn.n_neighbors if hasattr(item_knn, 'n_neighbors') else 5) + 1
    k_neighbors_param = min(desired_k_for_query, num_items_for_knn)
    if k_neighbors_param <= 0: return user_specific_mean
    try:
        distances, neighbor_indices_flat = item_knn.kneighbors(transformed_item_vector, n_neighbors=k_neighbors_param)
        neighbor_indices_flat = neighbor_indices_flat.flatten()
    except Exception as e:
        app.logger.error(f"CCF: Error in item_knn.kneighbors for vehicle '{vehicle_id_to_predict_str}': {e}", exc_info=True)
        return user_specific_mean
    similar_vehicle_ids_str = []
    for idx in neighbor_indices_flat:
        if 0 <= idx < num_items_for_knn:
            vid_str = X_items_index[idx]
            if vid_str != vehicle_id_to_predict_str: similar_vehicle_ids_str.append(vid_str)
    if not similar_vehicle_ids_str: return user_specific_mean
    user_ratings_for_similar_items = []
    hist_to_use_for_ccf = current_user_actual_history if current_user_actual_history is not None else user_history.get(user_id, {})
    for sim_vid_str in similar_vehicle_ids_str:
        if sim_vid_str in hist_to_use_for_ccf:
            try: user_ratings_for_similar_items.append(float(hist_to_use_for_ccf[sim_vid_str]))
            except (ValueError, TypeError): pass
    if not user_ratings_for_similar_items:
        if hist_to_use_for_ccf:
            try:
                valid_ratings_in_hist = [float(r) for r in hist_to_use_for_ccf.values() if isinstance(r, (int, float, str)) and str(r).replace('.', '', 1).isdigit()]
                if valid_ratings_in_hist: return np.clip(np.mean(valid_ratings_in_hist), MIN_RATING, MAX_RATING)
            except Exception: pass
        return user_specific_mean
    predicted_rating = np.mean(user_ratings_for_similar_items)
    return np.clip(predicted_rating, MIN_RATING, MAX_RATING)

# эндпоинт объекта
@app.route('/api/tf-recs/<string:uid>', methods=['GET'])
@jwt_required(optional=True)
def tf_recs(uid):
    if not user_lookup or not user_model or item_embeddings_norm is None or not tf_item_ids:
        app.logger.error(f"TF components not available for tf-recs for user {uid}. Aborting.")
        return jsonify([])
    try:
        idx = user_lookup(tf.constant([str(uid)])).numpy()[0]
        emb = user_model.predict(np.array([idx]))[0]
        emb = emb / (np.linalg.norm(emb)+1e-10)
        scores = item_embeddings_norm.dot(emb)
        k=10
        topk = np.argpartition(-scores, k)[:k]
        topk = topk[np.argsort(-scores[topk])]
        rec_ids = [tf_item_ids[i] for i in topk]
    except Exception as e:
        app.logger.error(f"tf-recs failed for {uid}: {e}", exc_info=True)
        return jsonify([])

    # загрузка данных об автомобиле
    vehicles = Vehicle.query.filter(Vehicle.vehicle_id.in_(rec_ids)).all()
    vmap = {v.vehicle_id:v for v in vehicles}
    out = []
    for vid in rec_ids:
        v = vmap.get(vid)
        if not v: continue
        out.append({
            'vehicle_id': v.vehicle_id,
            'brand':       v.brand,
            'model':       v.model,
            'body_type':   v.body_type,
            'year':        v.year,
            'gearbox':     v.gearbox,
            'drive':       v.drive,
            'power_hp':    v.power_hp,
            'seats':       v.seats,
            'price_per_day_usd': float(v.price_per_day_usd),
            'image_url':   v.image_url
        })
    return jsonify(out)

# эндпоинт пользователя
@app.route('/api/auth/register', methods=['POST'])
def register():
    data = request.get_json(silent=True)
    if not data: return jsonify({'error': 'Request body must be JSON and not empty'}), 400
    username, password = data.get('username'), data.get('password')
    if not username or not password: return jsonify({'error': 'Username and password required'}), 400
    if User.query.filter_by(username=username).first(): return jsonify({'error': 'User already exists'}), 409
    role = Role.query.filter_by(name='user').first()
    if not role:
        app.logger.error("CRITICAL: 'user' role not found during registration.")
        return jsonify({'error': 'Server configuration error, please try again later.'}), 500
    pw_hash = bcrypt.generate_password_hash(password).decode('utf-8')
    user = User(username=username, password_hash=pw_hash, role_id=role.id)
    db.session.add(user); db.session.commit()
    app.logger.info(f"User '{username}' registered with ID {user.id} and role '{role.name}'.")
    return jsonify({'message': 'Registered successfully. Please login.'}), 201


@app.route('/api/auth/login', methods=['POST'])
def login():
    data = request.get_json(silent=True)
    if not data: return jsonify({'error': 'Request body must be JSON and not empty'}), 400
    username, password = data.get('username'), data.get('password')
    if not username or not password: return jsonify({'error': 'Username and password required'}), 400
    user = User.query.filter_by(username=username).first()
    if not user or not bcrypt.check_password_hash(user.password_hash, password):
        app.logger.warning(f"Login attempt failed for username: {username}")
        return jsonify({'error': 'Invalid username or password'}), 401
    additional_claims = {"role": user.role.name if user.role else "user"}
    if not user.role: app.logger.error(f"User {user.id} ('{user.username}') has no role assigned at login!")
    token = create_access_token(identity=str(user.id), additional_claims=additional_claims)
    app.logger.info(f"User '{username}' (ID: {user.id}, Role: {additional_claims.get('role')}) logged in.")
    return jsonify({'token': token}), 200

@app.route('/api/vehicles', methods=['GET'])
def get_vehicles():
    vehicles_query = db.session.query(
        Vehicle,
        func.avg(Review.rating).label('avg_rating'),
        func.count(Review.id).label('review_count')
    ).outerjoin(Review, Vehicle.vehicle_id == Review.vehicle_id) \
     .group_by(Vehicle.vehicle_id).all()

    result = [{
        'vehicle_id': v.vehicle_id,
        'brand': v.brand,
        'model': v.model,
        'body_type': v.body_type,
        'year': v.year,
        'gearbox': v.gearbox,
        'drive': v.drive,
        'power_hp': v.power_hp,
        'seats': v.seats,
        'price_per_day_usd': float(v.price_per_day_usd),
        'image_url': v.image_url,
        'avg_rating': float(avg_rating) if avg_rating is not None else None,
        'review_count': review_count
    } for v, avg_rating, review_count in vehicles_query]
    return jsonify(result)

@app.route('/api/vehicles/<string:vid>', methods=['GET'])
def get_vehicle(vid):
    vehicle_data = db.session.query(
        Vehicle,
        func.avg(Review.rating).label('avg_rating'),
        func.count(Review.id).label('review_count')
    ).outerjoin(Review, Vehicle.vehicle_id == Review.vehicle_id) \
     .filter(Vehicle.vehicle_id == vid) \
     .group_by(Vehicle.vehicle_id).first()

    if not vehicle_data:
        return jsonify({'error': 'Vehicle not found'}), 404

    v, avg_rating, review_count = vehicle_data
    return jsonify({
        'vehicle_id': v.vehicle_id,
        'brand': v.brand,
        'model': v.model,
        'body_type': v.body_type,
        'year': v.year,
        'gearbox': v.gearbox,
        'drive': v.drive,
        'power_hp': v.power_hp,
        'seats': v.seats,
        'price_per_day_usd': float(v.price_per_day_usd),
        'image_url': v.image_url,
        'avg_rating': float(avg_rating) if avg_rating is not None else None,
        'review_count': review_count
    })

@app.route('/api/vehicles/<string:vid>/reviews', methods=['GET'])
def get_vehicle_reviews(vid):
    if not db.session.get(Vehicle, vid): return jsonify({'error': 'Vehicle not found'}), 404
    reviews_q = Review.query.filter_by(vehicle_id=vid).order_by(Review.created_at.desc()).all()
    return jsonify([{'id': r.id, 'user_id': r.user_id, 'vehicle_id': r.vehicle_id, 'order_id': r.order_id,
                     'rating': r.rating, 'created_at': r.created_at.isoformat(), 'comment': r.comment
                    } for r in reviews_q])

@app.route('/api/cart', methods=['GET', 'POST'])
@jwt_required()
def manage_cart():
    try: user_id = get_current_user_id_from_jwt()
    except ValueError as e: return jsonify(msg=str(e), error_code="INVALID_USER_ID"), 400
    if request.method == 'GET':
        items = CartItem.query.filter_by(user_id=user_id).all()
        return jsonify([{'vehicle_id': i.vehicle_id, 'brand': i.vehicle.brand, 'model': i.vehicle.model,
                         'price_per_day_usd': float(i.vehicle.price_per_day_usd), 'image_url': i.vehicle.image_url
                        } for i in items])
    data = request.get_json(silent=True)
    if not data: return jsonify({'error': 'Request body must be JSON'}), 400
    vid_str = data.get('vehicleId')
    if not isinstance(vid_str, str) or not vid_str.strip(): return jsonify({'error': 'Invalid vehicleId, must be a non-empty string'}), 400
    if not db.session.get(Vehicle, vid_str): return jsonify({'error': f'Vehicle {vid_str} not found'}), 404
    if CartItem.query.filter_by(user_id=user_id, vehicle_id=vid_str).first(): return jsonify({'error': 'Item already in cart'}), 409
    db.session.add(CartItem(user_id=user_id, vehicle_id=vid_str)); db.session.commit()
    items_after_add = CartItem.query.filter_by(user_id=user_id).all()
    return jsonify([{'vehicle_id': i.vehicle_id, 'brand': i.vehicle.brand, 'model': i.vehicle.model,
                     'price_per_day_usd': float(i.vehicle.price_per_day_usd), 'image_url': i.vehicle.image_url
                    } for i in items_after_add]), 201

@app.route('/api/cart/<string:vid>', methods=['DELETE'])
@jwt_required()
def remove_cart(vid):
    try: user_id = get_current_user_id_from_jwt()
    except ValueError as e: return jsonify(msg=str(e), error_code="INVALID_USER_ID"), 400
    item = CartItem.query.filter_by(user_id=user_id, vehicle_id=vid).first()
    if not item: return jsonify({'error': 'Item not in cart'}), 404
    db.session.delete(item); db.session.commit()
    items_after_delete = CartItem.query.filter_by(user_id=user_id).all()
    return jsonify([{'vehicle_id': i.vehicle_id, 'brand': i.vehicle.brand, 'model': i.vehicle.model,
                     'price_per_day_usd': float(i.vehicle.price_per_day_usd), 'image_url': i.vehicle.image_url
                    } for i in items_after_delete]), 200

@app.route('/api/checkout', methods=['POST'])
@jwt_required()
def checkout():
    try: user_id = get_current_user_id_from_jwt()
    except ValueError as e: return jsonify(msg=str(e), error_code="INVALID_USER_ID"), 400
    items = CartItem.query.filter_by(user_id=user_id).all()
    if not items: return jsonify({'error': 'Cart empty'}), 400
    order = Order(user_id=user_id)
    db.session.add(order); db.session.flush()
    for ci in items:
        db.session.add(OrderItem(order_id=order.id, vehicle_id=ci.vehicle_id, price=ci.vehicle.price_per_day_usd))
        db.session.delete(ci)
    db.session.commit()
    app.logger.info(f"Checkout successful for user {user_id}, order {order.id}. Cart cleared.")
    return get_history()

@app.route('/api/history', methods=['GET'])
@jwt_required()
def get_history():
    try: user_id = get_current_user_id_from_jwt()
    except ValueError as e: return jsonify(msg=str(e), error_code="INVALID_USER_ID"), 400
    orders_q = Order.query.filter_by(user_id=user_id).order_by(Order.created_at.desc()).all()
    return jsonify([{'order_id': o.id, 'created_at': o.created_at.isoformat(),
                     'items': [{'vehicle_id': it.vehicle_id, 'brand': it.vehicle.brand,
                                'model': it.vehicle.model, 'price': float(it.price),
                                'image_url': it.vehicle.image_url } for it in o.items]
                    } for o in orders_q])

@app.route('/api/reviews', methods=['GET'])
@jwt_required()
def list_my_reviews():
    try: user_id = get_current_user_id_from_jwt()
    except ValueError as e: return jsonify(msg=str(e), error_code="INVALID_USER_ID"), 400
    revs_q = db.session.query(Review, Vehicle.brand, Vehicle.model, Vehicle.image_url)\
        .join(Vehicle, Review.vehicle_id == Vehicle.vehicle_id)\
        .filter(Review.user_id == user_id).order_by(Review.created_at.desc()).all()
    return jsonify([{'id': r.id, 'vehicle_id': r.vehicle_id,
                     'vehicle_brand': brand, 'vehicle_model': model, 'vehicle_image_url': image_url,
                     'order_id': r.order_id, 'rating': r.rating, 'created_at': r.created_at.isoformat(),
                     'comment': r.comment} for r, brand, model, image_url in revs_q])

@app.route('/api/reviews', methods=['POST'])
@jwt_required()
def add_review():
    try:
        user_id = get_current_user_id_from_jwt()
    except ValueError as e:
        app.logger.error(f"AddReview: Invalid user ID in token: {e}")
        return jsonify(msg=str(e), error_code="INVALID_USER_ID"), 400

    data = request.get_json(silent=True)
    app.logger.debug(f"AddReview: Received data for user {user_id}: {data}")

    if not data:
        app.logger.warning(f"AddReview: User {user_id} - Request body is not JSON or empty.")
        return jsonify({'error': 'Request body must be JSON and not empty'}), 400

    vid_str = data.get('vehicle_id')
    oid = data.get('order_id')
    rating_val = data.get('rating')
    comment_text = data.get('comment')

    if not isinstance(vid_str, str) or not vid_str.strip():
        app.logger.warning(f"AddReview: User {user_id} - Missing or invalid vehicle_id: {vid_str}")
        return jsonify({'error': 'Missing or invalid type for field: vehicle_id (must be string)'}), 400
    if not isinstance(oid, int):
        app.logger.warning(f"AddReview: User {user_id} - Missing or invalid order_id type: {oid} (type: {type(oid)})")
        return jsonify({'error': 'Missing or invalid type for field: order_id (must be integer)'}), 400
    if not isinstance(rating_val, (int, float)):
        app.logger.warning(f"AddReview: User {user_id} - Missing or invalid rating type: {rating_val} (type: {type(rating_val)})")
        return jsonify({'error': 'Missing or invalid type for field: rating (must be number)'}), 400
    if not (MIN_RATING <= rating_val <= MAX_RATING):
        app.logger.warning(f"AddReview: User {user_id} - Rating out of range: {rating_val}")
        return jsonify({'error': f'Rating must be between {MIN_RATING} and {MAX_RATING}'}), 400

    order = db.session.get(Order, oid)
    if not order:
        app.logger.warning(f"AddReview: User {user_id} - Order ID {oid} not found.")
        return jsonify({'error': 'Order not found'}), 404
    if order.user_id != user_id:
        app.logger.warning(f"AddReview: User {user_id} - Order ID {oid} does not belong to this user (belongs to {order.user_id}).")
        return jsonify({'error': 'Invalid order or not user order'}), 403 

    if not any(it.vehicle_id == vid_str for it in order.items):
        app.logger.warning(f"AddReview: User {user_id} - Vehicle ID {vid_str} not found in order ID {oid}.")
        return jsonify({'error': 'Vehicle not in specified order'}), 400

    if Review.query.filter_by(user_id=user_id, vehicle_id=vid_str, order_id=oid).first():
        app.logger.warning(f"AddReview: User {user_id} - Review for vehicle ID {vid_str} in order ID {oid} already exists.")
        return jsonify({'error': 'Review for this item in this order already exists'}), 409

    r = Review(user_id=user_id, vehicle_id=vid_str, order_id=oid, rating=rating_val, comment=comment_text)
    db.session.add(r)
    db.session.commit()
    app.logger.info(f"AddReview: User {user_id} - Review ID {r.id} created successfully for vehicle {vid_str}, order {oid}.")

    v_info = db.session.get(Vehicle, vid_str)
    return jsonify({
        'id': r.id, 'vehicle_id': r.vehicle_id, 'order_id': r.order_id, 'rating': r.rating,
        'created_at': r.created_at.isoformat(), 'comment': r.comment,
        'vehicle_brand': v_info.brand if v_info else None,
        'vehicle_model': v_info.model if v_info else None,
        'vehicle_image_url': v_info.image_url if v_info else None
    }), 201


@app.route('/api/reviews/<int:rid>', methods=['PUT'])
@jwt_required()
def update_review(rid):
    try:
        user_id = get_current_user_id_from_jwt()
    except ValueError as e:
        app.logger.error(f"UpdateReview: Invalid user ID in token: {e}")
        return jsonify(msg=str(e), error_code="INVALID_USER_ID"), 400

    data = request.get_json(silent=True)
    app.logger.debug(f"UpdateReview: Received data for review ID {rid}, user {user_id}: {data}")

    if not data:
        app.logger.warning(f"UpdateReview: User {user_id}, Review ID {rid} - Request body is not JSON or empty.")
        return jsonify({'error': 'Request body must be JSON and not empty'}), 400

    rev = db.session.get(Review, rid)
    if not rev:
        app.logger.warning(f"UpdateReview: User {user_id} - Review ID {rid} not found.")
        return jsonify({'error': 'Review not found'}), 404
    if rev.user_id != user_id:
        app.logger.warning(f"UpdateReview: User {user_id} - Review ID {rid} does not belong to this user (belongs to {rev.user_id}).")
        return jsonify({'error': 'Review not found or not owned by user'}), 403

    if 'rating' not in data:
        app.logger.warning(f"UpdateReview: User {user_id}, Review ID {rid} - Missing 'rating' field in request.")
        return jsonify({'error': 'Missing rating field for update'}), 400

    try:
        rating_val = data['rating']
        if not isinstance(rating_val, (int, float)):
            app.logger.warning(f"UpdateReview: User {user_id}, Review ID {rid} - Invalid rating type: {rating_val}")
            raise ValueError("Rating must be a number.")
        if not (MIN_RATING <= rating_val <= MAX_RATING):
            app.logger.warning(f"UpdateReview: User {user_id}, Review ID {rid} - Rating out of range: {rating_val}")
            raise ValueError(f"Rating must be between {MIN_RATING} and {MAX_RATING}.")
    except (ValueError, TypeError) as e:
        return jsonify({'error': f'Invalid rating: {e}'}), 400

    rev.rating = rating_val
    if 'comment' in data:
        rev.comment = data.get('comment', rev.comment)

    db.session.commit()
    app.logger.info(f"UpdateReview: User {user_id} - Review ID {rid} updated successfully.")

    v_info = db.session.get(Vehicle, rev.vehicle_id)
    return jsonify({
        'id': rev.id, 'vehicle_id': rev.vehicle_id, 'order_id': rev.order_id, 'rating': rev.rating,
        'created_at': rev.created_at.isoformat(), 'comment': rev.comment,
        'vehicle_brand': v_info.brand if v_info else None,
        'vehicle_model': v_info.model if v_info else None,
        'vehicle_image_url': v_info.image_url if v_info else None
    }), 200

@app.route('/api/reviews/<int:rid>', methods=['DELETE'])
@jwt_required()
def delete_review(rid):
    try: user_id = get_current_user_id_from_jwt()
    except ValueError as e: return jsonify(msg=str(e), error_code="INVALID_USER_ID"), 400
    r = db.session.get(Review, rid)
    if not r or r.user_id != user_id: return jsonify({'error': 'Review not found or not owned'}), 404
    db.session.delete(r); db.session.commit()
    app.logger.info(f"DeleteReview: User {user_id} - Review ID {rid} deleted.")
    return '', 204


@app.route('/api/recommendations', methods=['GET']) 
@jwt_required(optional=True) 
def get_general_recommendations():
    user_id = None
    try:
        if get_jwt_identity(): user_id = get_current_user_id_from_jwt()
    except Exception: user_id = None
    recent_vids_str = set()
    MIN_ITEMS_FOR_SIMILARITY = 1 
    MAX_SOURCE_ITEMS = 3 
    if user_id:
        orders = Order.query.filter_by(user_id=user_id).order_by(Order.created_at.desc()).limit(MAX_SOURCE_ITEMS).all()
        for o in orders:
            for item in o.items: recent_vids_str.add(str(item.vehicle_id))
            if len(recent_vids_str) >= MAX_SOURCE_ITEMS: break
        if len(recent_vids_str) < MIN_ITEMS_FOR_SIMILARITY:
            cart_items = CartItem.query.filter_by(user_id=user_id).limit(MAX_SOURCE_ITEMS - len(recent_vids_str)).all()
            for item in cart_items: recent_vids_str.add(str(item.vehicle_id))
    if not recent_vids_str or len(recent_vids_str) < MIN_ITEMS_FOR_SIMILARITY :
        app.logger.info(f"GeneralRecommendations: User {user_id if user_id else 'Guest'} has insufficient history. Serving popular items.")
        pop_recs_q = db.session.query(Vehicle, func.avg(Review.rating).label('avg_r'), func.count(Review.id).label('rev_c'))\
            .outerjoin(Review).group_by(Vehicle.vehicle_id)\
            .order_by(func.count(Review.id).desc(), func.avg(Review.rating).desc().nullslast()).limit(8).all()
        return jsonify([{'vehicle_id': v.vehicle_id, 'brand': v.brand, 'model': v.model, 'body_type': v.body_type,
                         'year': v.year, 'gearbox': v.gearbox, 'drive': v.drive, 'power_hp': v.power_hp, 'seats': v.seats,
                         'price_per_day_usd': float(v.price_per_day_usd), 'image_url': v.image_url,
                         'avg_rating': float(avg_r) if avg_r else None, 'review_count': rev_c} for v, avg_r, rev_c in pop_recs_q])
    recent_vehicles_objs = Vehicle.query.filter(Vehicle.vehicle_id.in_(list(recent_vids_str))).all()
    body_types = list(set(v.body_type for v in recent_vehicles_objs if v.body_type))
    brands = list(set(v.brand for v in recent_vehicles_objs if v.brand))
    seen_vids_for_this_user_query_str = recent_vids_str.copy()
    if user_id:
        seen_vids_for_this_user_query_str.update(item.vehicle_id for item in CartItem.query.filter_by(user_id=user_id).all())
        all_ordered_items = OrderItem.query.join(Order).filter(Order.user_id == user_id).all()
        seen_vids_for_this_user_query_str.update(str(item.vehicle_id) for item in all_ordered_items)
    q_filters = []
    if body_types: q_filters.append(Vehicle.body_type.in_(body_types))
    if brands: q_filters.append(Vehicle.brand.in_(brands))
    if not q_filters:
        app.logger.warning(f"GeneralRecommendations: User {user_id} - no criteria from history. Falling back to popular.")
        pop_recs_q = db.session.query(Vehicle, func.avg(Review.rating).label('avg_r'), func.count(Review.id).label('rev_c'))\
            .outerjoin(Review).group_by(Vehicle.vehicle_id)\
            .order_by(func.count(Review.id).desc(), func.avg(Review.rating).desc().nullslast()).limit(8).all()
        return jsonify([{'vehicle_id': v.vehicle_id, 'brand': v.brand, 'model': v.model, 'body_type': v.body_type,
                         'year': v.year, 'gearbox': v.gearbox, 'drive': v.drive, 'power_hp': v.power_hp, 'seats': v.seats,
                         'price_per_day_usd': float(v.price_per_day_usd), 'image_url': v.image_url,
                         'avg_rating': float(avg_r) if avg_r else None, 'review_count': rev_c} for v, avg_r, rev_c in pop_recs_q])
    recs_q_builder = db.session.query(Vehicle, func.avg(Review.rating).label('avg_r'), func.count(Review.id).label('rev_c'))\
        .outerjoin(Review).filter(or_(*q_filters))
    if seen_vids_for_this_user_query_str:
        recs_q_builder = recs_q_builder.filter(~Vehicle.vehicle_id.in_(list(seen_vids_for_this_user_query_str)))
    final_recs_q = recs_q_builder.group_by(Vehicle.vehicle_id)\
        .order_by(func.count(Review.id).desc(), func.avg(Review.rating).desc().nullslast(), func.random()).limit(4).all()
    if not final_recs_q:
        app.logger.info(f"GeneralRecommendations: User {user_id} - no recommendations from history similarity. Falling back to popular.")
        pop_recs_q = db.session.query(Vehicle, func.avg(Review.rating).label('avg_r'), func.count(Review.id).label('rev_c'))\
            .outerjoin(Review).group_by(Vehicle.vehicle_id)\
            .order_by(func.count(Review.id).desc(), func.avg(Review.rating).desc().nullslast()).limit(4).all()
        final_recs_q = pop_recs_q
    return jsonify([{'vehicle_id': v.vehicle_id, 'brand': v.brand, 'model': v.model, 'body_type': v.body_type,
                     'year': v.year, 'gearbox': v.gearbox, 'drive': v.drive, 'power_hp': v.power_hp, 'seats': v.seats,
                     'price_per_day_usd': float(v.price_per_day_usd), 'image_url': v.image_url,
                     'avg_rating': float(avg_r) if avg_r else None, 'review_count': rev_c} for v, avg_r, rev_c in final_recs_q])

@app.route('/api/recommendations/personal', methods=['GET'])
@jwt_required()
def recommendations_personal_revised():
    try: user_id = get_current_user_id_from_jwt()
    except ValueError as e: return jsonify(msg=str(e), error_code="INVALID_USER_ID"), 400
    app.logger.debug(f"PersonalRecommendations: Request for user_id: {user_id}")
    user_actual_reviews_db = Review.query.filter_by(user_id=user_id).all()
    current_user_actual_history_for_prediction = {str(r.vehicle_id): float(r.rating) for r in user_actual_reviews_db}
    MIN_REVIEWS_FOR_PERSONAL = 1
    if not current_user_actual_history_for_prediction or len(current_user_actual_history_for_prediction) < MIN_REVIEWS_FOR_PERSONAL:
        app.logger.info(f"PersonalRecommendations: User {user_id} has {len(current_user_actual_history_for_prediction)} actual reviews. Returning empty list.")
        return jsonify([])
    app.logger.debug(f"PersonalRecommendations: User {user_id} has {len(current_user_actual_history_for_prediction)} items in actual history.")
    all_db_vids_str = [str(v.vehicle_id) for v in db.session.query(Vehicle.vehicle_id).all()]
    seen_vids_user_str = set(current_user_actual_history_for_prediction.keys())

    hist_vids = list(current_user_actual_history_for_prediction.keys())
    hist_vehicles = db.session.query(Vehicle).filter(Vehicle.vehicle_id.in_(hist_vids)).all()
    brands = {v.brand for v in hist_vehicles if v.brand}
    body_types = {v.body_type for v in hist_vehicles if v.body_type}
    avg_year = sum(v.year for v in hist_vehicles) / len(hist_vehicles)
    avg_power = sum(v.power_hp for v in hist_vehicles) / len(hist_vehicles)
    year_min = int(avg_year) - 6
    year_max = int(avg_year) + 6
    power_min = int(avg_power) - 80
    power_max = int(avg_power) + 80
    all_db_vids_str    = [str(v.vehicle_id) for v in db.session.query(Vehicle.vehicle_id).all()]
    seen_vids_user_str = set(hist_vids)
    for order in Order.query.filter_by(user_id=user_id).all():
        for item in order.items: seen_vids_user_str.add(str(item.vehicle_id))
    for item in CartItem.query.filter_by(user_id=user_id).all(): seen_vids_user_str.add(str(item.vehicle_id))
    candidate_vids_str = [vid_str for vid_str in all_db_vids_str if vid_str not in seen_vids_user_str]

    valid_vids = {
        vid for (vid,) in db.session.query(Vehicle.vehicle_id)
            .filter(
                Vehicle.vehicle_id.in_(candidate_vids_str),
                Vehicle.brand.in_(brands),
                Vehicle.body_type.in_(body_types),
                Vehicle.year.between(year_min, year_max),
                Vehicle.power_hp.between(power_min, power_max)
            )
            .all()
    }
    if valid_vids:
        candidate_vids_str = list(valid_vids)
    app.logger.debug(f"PersonalRecommendations: User {user_id} - candidates after attribute filter: {len(candidate_vids_str)}")
    
    if not candidate_vids_str:
        app.logger.info(f"PersonalRecommendations: User {user_id} - no candidate vehicles left.")
        return jsonify([])
    app.logger.debug(f"PersonalRecommendations: User {user_id} - candidate vehicles count: {len(candidate_vids_str)}")
    preds = []
    for vid_str in candidate_vids_str:
        ucf_p = predict_user_cf_revised(user_id, vid_str, current_user_actual_history_for_prediction)
        ccf_p = predict_content_cf_revised(user_id, vid_str, current_user_actual_history_for_prediction)
        ucf_p = global_mean if pd.isna(ucf_p) else ucf_p
        ccf_p = global_mean if pd.isna(ccf_p) else ccf_p
        hybrid_p = best_alpha * ucf_p + (1.0 - best_alpha) * ccf_p
        preds.append({'vehicle_id': vid_str, 'score': hybrid_p})
    FINAL_N_RECS = 10
    sorted_preds_by_score = sorted(preds, key=lambda x: x['score'], reverse=True)
    top_cand_ids_str = [p['vehicle_id'] for p in sorted_preds_by_score[:FINAL_N_RECS*2]]
    if not top_cand_ids_str:
        app.logger.info(f"PersonalRecommendations: User {user_id} - no candidates after prediction.")
        return jsonify([])
    recs_q = db.session.query(Vehicle, func.avg(Review.rating).label('avg_r'), func.count(Review.id).label('rev_c'))\
        .outerjoin(Review).filter(Vehicle.vehicle_id.in_(top_cand_ids_str)).group_by(Vehicle.vehicle_id).all()
    recs_map = {str(v.vehicle_id): {
        'data': v, 'avg_r': float(avg_r) if avg_r else None, 'rev_c': rev_c,
        'pred_score': next((p['score'] for p in sorted_preds_by_score if p['vehicle_id'] == str(v.vehicle_id)), global_mean)
        } for v, avg_r, rev_c in recs_q}
    enriched_recs_list = []
    for p_item_id_str in top_cand_ids_str:
        if p_item_id_str in recs_map:
            entry = recs_map[p_item_id_str]
            v_obj, avg_r_val, rev_c_val, pred_score_val = entry['data'], entry['avg_r'], entry['rev_c'], entry['pred_score']
            enriched_recs_list.append({
                'vehicle_id': v_obj.vehicle_id, 'brand': v_obj.brand, 'model': v_obj.model,
                'body_type': v_obj.body_type, 'year': v_obj.year, 'gearbox': v_obj.gearbox,
                'drive': v_obj.drive, 'power_hp': v_obj.power_hp, 'seats': v_obj.seats,
                'price_per_day_usd': float(v_obj.price_per_day_usd), 'image_url': v_obj.image_url,
                'predicted_score_for_user': round(pred_score_val, 2),
                'avg_rating': avg_r_val, 'review_count': rev_c_val })
    final_recs_list = enriched_recs_list[:FINAL_N_RECS]
    app.logger.debug(f"PersonalRecommendations: User {user_id} - final recs count: {len(final_recs_list)}")
    return jsonify(final_recs_list)

@app.route('/api/vehicles/<string:vehicle_id_target>/recommendations', methods=['GET'])
def recommendations_by_vehicle_revised(vehicle_id_target):
    app.logger.debug(f"SimilarVehicles: Request for target_id: {vehicle_id_target}")
    if item_knn is None or item_pipeline is None or X_items_index is None or not X_ITEMS_PIPELINE_COLS:
        app.logger.warning("SimilarVehicles: Core artifacts missing. Returning [].")
        return jsonify([])
    target_v_db = db.session.get(Vehicle, vehicle_id_target)
    if not target_v_db:
        app.logger.warning(f"SimilarVehicles: Target vehicle ID {vehicle_id_target} not in DB. Returning [].")
        return jsonify([])
    app.logger.debug(f"SimilarVehicles: Target vehicle: {target_v_db.brand} {target_v_db.model}")

    year_min = target_v_db.year - 6
    year_max = target_v_db.year + 6
    power_min = target_v_db.power_hp - 80
    power_max = target_v_db.power_hp + 80
    valid_vids = {
        vid for (vid,) in db.session.query(Vehicle.vehicle_id)
            .filter(
                Vehicle.brand == target_v_db.brand,
                Vehicle.body_type == target_v_db.body_type,
                Vehicle.year.between(year_min, year_max),
                Vehicle.power_hp.between(power_min, power_max)
            )
            .all()
        if vid != vehicle_id_target
    }
    if not valid_vids:
        app.logger.info(f"SimilarVehicles: No candidates after attribute filtering for {vehicle_id_target}.")
        return jsonify([])


    item_feats_dict = {}
    for feat_name in X_ITEMS_PIPELINE_COLS:
        if feat_name == 'model_grouped':
            raw_model = getattr(target_v_db, 'model', None)
            item_feats_dict['model_grouped'] = raw_model if raw_model and raw_model in TOP_MODELS_FOR_GROUPING else 'Other_Model'
        else: item_feats_dict[feat_name] = getattr(target_v_db, feat_name, None)
    app.logger.debug(f"SimilarVehicles: Features for pipeline: {item_feats_dict}")
    try:
        item_feats_df = pd.DataFrame([item_feats_dict])[X_ITEMS_PIPELINE_COLS]
        transformed_v_vec = item_pipeline.transform(item_feats_df)
        app.logger.debug(f"SimilarVehicles: Item vector transformed. Shape: {transformed_v_vec.shape}")
    except Exception as e:
        app.logger.error(f"SimilarVehicles: Error in item_pipeline.transform: {e}", exc_info=True)
        return jsonify([])
    num_items_for_knn = len(X_items_index) if X_items_index is not None else 0
    FINAL_N_RECS_CB = 4
    desired_neighbors_for_query = FINAL_N_RECS_CB + 1
    k_param_query = min(desired_neighbors_for_query,
                        item_knn.n_neighbors if hasattr(item_knn, 'n_neighbors') else desired_neighbors_for_query,
                        num_items_for_knn)
    if k_param_query <= 0 :
        app.logger.warning(f"SimilarVehicles: k_param_query is {k_param_query}. Returning [].")
        return jsonify([])
    app.logger.debug(f"SimilarVehicles: Querying KNN with k_param_query = {k_param_query}")
    try:
        distances, neigh_indices_flat = item_knn.kneighbors(transformed_v_vec, n_neighbors=k_param_query)
        neigh_indices_flat = neigh_indices_flat.flatten()
        app.logger.debug(f"SimilarVehicles: Neighbors found. Indices: {neigh_indices_flat}, Distances: {distances.flatten()}")
    except Exception as e:
        app.logger.error(f"SimilarVehicles: Error in item_knn.kneighbors: {e}", exc_info=True)
        return jsonify([])
    sim_vids_list_str = []
    for i, idx in enumerate(neigh_indices_flat):
        if 0 <= idx < num_items_for_knn:
            item_id_from_X_items_index = X_items_index[idx]
            if item_id_from_X_items_index != vehicle_id_target:
                sim_vids_list_str.append(item_id_from_X_items_index)
            if item_id_from_X_items_index in valid_vids:
                sim_vids_list_str.append(item_id_from_X_items_index)
        if len(sim_vids_list_str) >= FINAL_N_RECS_CB: break
    app.logger.debug(f"SimilarVehicles: Similar vehicle IDs (limited to {FINAL_N_RECS_CB}): {sim_vids_list_str}")
    top_sim_ids_str = sim_vids_list_str
    if not top_sim_ids_str:
        app.logger.info(f"SimilarVehicles: No similar vehicles for {vehicle_id_target}. Returning [].")
        return jsonify([])
    recs_db = db.session.query(Vehicle, func.avg(Review.rating).label('avg_r'), func.count(Review.id).label('rev_c'))\
        .outerjoin(Review).filter(Vehicle.vehicle_id.in_(top_sim_ids_str)).group_by(Vehicle.vehicle_id).all()
    recs_map_cb = {str(v.vehicle_id): {'data': v, 'avg_r': avg_r, 'rev_c': rev_c} for v, avg_r, rev_c in recs_db}
    final_recs_cb_list = []
    for vid_str_sim in top_sim_ids_str:
        if vid_str_sim in recs_map_cb:
            v_obj, avg_r, rev_c = recs_map_cb[vid_str_sim]['data'], recs_map_cb[vid_str_sim]['avg_r'], recs_map_cb[vid_str_sim]['rev_c']
            final_recs_cb_list.append({
                'vehicle_id': v_obj.vehicle_id, 'brand': v_obj.brand, 'model': v_obj.model, 'body_type': v_obj.body_type,
                'year': v_obj.year, 'gearbox': v_obj.gearbox, 'drive': v_obj.drive, 'power_hp': v_obj.power_hp, 'seats': v_obj.seats,
                'price_per_day_usd': float(v_obj.price_per_day_usd), 'image_url': v_obj.image_url,
                'avg_rating': float(avg_r) if avg_r else None, 'review_count': rev_c})
    app.logger.debug(f"SimilarVehicles: Final recommendations count: {len(final_recs_cb_list)}")
    return jsonify(final_recs_cb_list)

@app.route('/api/admin/users', methods=['GET'])
@admin_required
def admin_get_users():
    try:
        users_query = User.query.join(Role).options(db.joinedload(User.role)).order_by(User.id).all()
        return jsonify([{'id': u.id, 'username': u.username, 'role': u.role.name if u.role else 'N/A'
                        } for u in users_query])
    except Exception as e:
        app.logger.error(f"Error in admin_get_users: {e}", exc_info=True)
        return jsonify(error="Failed to retrieve users"), 500

@app.route('/api/admin/users/<int:user_id_to_update>', methods=['PUT'])
@admin_required
def admin_update_user(user_id_to_update):
    user = User.query.get_or_404(user_id_to_update)
    data = request.get_json()
    if not data: return jsonify({'error': 'Request body must be JSON'}), 400
    try:
        if 'username' in data:
            new_username = data['username'].strip()
            if not new_username: return jsonify({'error': 'Username cannot be empty'}), 400
            if new_username != user.username and User.query.filter(User.id != user_id_to_update, User.username == new_username).first():
                return jsonify({'error': 'Username already taken'}), 409
            user.username = new_username
        if 'password' in data and data['password']:
            if len(data['password']) < 4: return jsonify({'error': 'Password must be at least 4 characters long'}), 400
            user.password_hash = bcrypt.generate_password_hash(data['password']).decode('utf-8')
            app.logger.info(f"Admin updated password for user ID: {user_id_to_update}")
        if 'role' in data:
            new_role_name = data['role']
            current_admin_id = get_current_user_id_from_jwt()
            if user.id == current_admin_id and user.role.name == 'admin' and new_role_name != 'admin':
                admin_count = User.query.join(Role).filter(Role.name == 'admin').count()
                if admin_count <= 1: return jsonify({'error': 'Cannot remove admin role from the last administrator.'}), 403
            role_obj = Role.query.filter_by(name=new_role_name).first() # Renamed to avoid conflict
            if not role_obj: return jsonify({'error': f'Role "{new_role_name}" not found'}), 400
            user.role_id = role_obj.id
        db.session.commit()
        app.logger.info(f"Admin updated user ID: {user_id_to_update}. Username: {user.username}, Role: {user.role.name}")
        return jsonify({'id': user.id, 'username': user.username, 'role': user.role.name if user.role else 'N/A'})
    except ValueError as e:
        app.logger.error(f"Admin update user: Error parsing current admin ID from JWT: {e}")
        return jsonify({'error': 'Internal server error processing admin identity.'}), 500
    except Exception as e:
        db.session.rollback()
        app.logger.error(f"Error updating user {user_id_to_update}: {e}", exc_info=True)
        return jsonify(error="Failed to update user details."), 500

@app.route('/api/admin/users/<int:user_id_to_delete>', methods=['DELETE'])
@admin_required
def admin_delete_user(user_id_to_delete):
    try:
        current_admin_id = get_current_user_id_from_jwt()
        if user_id_to_delete == current_admin_id:
            return jsonify({'error': 'You cannot delete your own account.'}), 403

        user_to_del = User.query.get_or_404(user_id_to_delete)

        Review.query.filter_by(user_id=user_id_to_delete).delete()
        orders = Order.query.filter_by(user_id=user_id_to_delete).all()
        for order in orders:
            OrderItem.query.filter_by(order_id=order.id).delete()
            db.session.delete(order)

        db.session.delete(user_to_del)
        db.session.commit()

        app.logger.info(f"Admin deleted user ID: {user_id_to_delete}")
        return jsonify({'message': f'User ID {user_id_to_delete} deleted successfully.'}), 200

    except HTTPException as he:
        return jsonify({'error': he.description}), he.code

    except Exception as e:
        db.session.rollback()
        app.logger.error(f"Error deleting user {user_id_to_delete}: {e}", exc_info=True)
        return jsonify({'error': 'Failed to delete user due to server error.'}), 500

@app.route('/api/admin/vehicles', methods=['GET'])
@admin_required
def admin_get_all_vehicles():
    try:
        vehicles_query = Vehicle.query.order_by(Vehicle.brand, Vehicle.model, Vehicle.year).all()
        return jsonify([{'vehicle_id': v.vehicle_id, 'brand': v.brand, 'model': v.model,
                         'body_type': v.body_type, 'year': v.year, 'gearbox': v.gearbox,
                         'drive': v.drive, 'power_hp': v.power_hp, 'seats': v.seats,
                         'price_per_day_usd': float(v.price_per_day_usd), 'image_url': v.image_url
                        } for v in vehicles_query])
    except Exception as e:
        app.logger.error(f"Error in admin_get_all_vehicles: {e}", exc_info=True)
        return jsonify(error="Failed to retrieve vehicles for admin panel."), 500

@app.route('/api/admin/vehicles', methods=['POST'])
@admin_required
@cross_origin(origins="http://localhost:5173")
def admin_add_new_vehicle():
    try:
        data = request.get_json(force=True)
    except Exception:
        return jsonify(error="Request body must be valid JSON."), 400

    if not data:
        return jsonify(error="Request body cannot be empty."), 400

    vid = data.get('vehicle_id')
    if not vid or not isinstance(vid, str) or not vid.strip():
        return jsonify(error="Field 'vehicle_id' (UUID) is required."), 400
    vid = vid.strip()
    if Vehicle.query.get(vid):
        return jsonify(error=f"Vehicle with ID '{vid}' already exists."), 409

    required = ['brand', 'body_type', 'year', 'gearbox', 'drive', 'power_hp', 'seats', 'price_per_day_usd']
    missing = [f for f in required if data.get(f) is None or str(data.get(f)).strip() == '']
    if missing:
        return jsonify(error=f"Missing or empty required fields: {', '.join(missing)}."), 400

    try:
        brand       = str(data['brand']).strip()
        body_type   = str(data['body_type']).strip()
        year        = int(data['year'])
        gearbox     = str(data['gearbox']).strip()
        drive       = str(data['drive']).strip()
        power_hp    = int(data['power_hp'])
        seats       = int(data['seats'])
        price       = Decimal(str(data['price_per_day_usd']))
        image_url   = str(data.get('image_url','')).strip() or None

        if not brand:     return jsonify(error="Brand cannot be empty."), 400
        if not body_type: return jsonify(error="Body type cannot be empty."), 400
        now_year = datetime.now().year
        if not (1900 <= year <= now_year + 2):
            return jsonify(error=f"Year must be between 1900 and {now_year+2}."), 400
        if not gearbox:   return jsonify(error="Gearbox cannot be empty."), 400
        if not drive:     return jsonify(error="Drive cannot be empty."), 400
        if not (0 < power_hp < 5000):
            return jsonify(error="Power_hp must be >0 and <5000."), 400
        if not (1 <= seats <= 20):
            return jsonify(error="Seats must be between 1 and 20."), 400
        if price <= 0:
            return jsonify(error="Price_per_day_usd must be positive."), 400

        new_v = Vehicle(
            vehicle_id=vid,
            brand=brand,
            model=str(data.get('model','')).strip() or None,
            body_type=body_type,
            year=year,
            gearbox=gearbox,
            drive=drive,
            power_hp=power_hp,
            seats=seats,
            price_per_day_usd=price,
            image_url=image_url
        )
        db.session.add(new_v)
        db.session.commit()

        app.logger.info(f"Admin created vehicle {vid} ({brand} {new_v.model or ''}).")
        return jsonify({
            'vehicle_id': vid,
            'brand': brand,
            'model': new_v.model,
            'body_type': body_type,
            'year': year,
            'gearbox': gearbox,
            'drive': drive,
            'power_hp': power_hp,
            'seats': seats,
            'price_per_day_usd': float(price),
            'image_url': image_url
        }), 201

    except ValueError as ve:
        db.session.rollback()
        app.logger.warning(f"ValueError in admin_add_new_vehicle: {ve}. Payload: {data}")
        return jsonify(error=f"Invalid data type: {ve}"), 400

    except HTTPException as he:
        return jsonify(error=str(he)), he.code

    except Exception as e:
        db.session.rollback()
        app.logger.error(f"Unexpected error in admin_add_new_vehicle: {e}", exc_info=True)
        return jsonify(error="Server error while creating vehicle."), 500

@app.route('/api/admin/vehicles/<string:vehicle_id>', methods=['PUT'])
@admin_required
def admin_edit_vehicle(vehicle_id):
    vehicle = Vehicle.query.get_or_404(vehicle_id)
    data = request.get_json()
    if not data: return jsonify({'error': 'Request body must be JSON and not empty.'}), 400
    try:
        if 'brand' in data:
            brand_val = str(data['brand']).strip()
            if not brand_val: return jsonify({'error': 'Brand cannot be empty.'}), 400
            vehicle.brand = brand_val
        if 'model' in data: vehicle.model = str(data.get('model', '')).strip() or None
        if 'body_type' in data:
            body_type_val = str(data['body_type']).strip()
            if not body_type_val: return jsonify({'error': 'Body type cannot be empty.'}), 400
            vehicle.body_type = body_type_val
        if 'year' in data:
            year_val = int(data['year'])
            if not (1900 <= year_val <= datetime.now().year + 2): return jsonify({'error': f'Invalid year: {year_val}.'}), 400
            vehicle.year = year_val
        if 'gearbox' in data:
            gearbox_val = str(data['gearbox']).strip()
            if not gearbox_val: return jsonify({'error': 'Gearbox cannot be empty.'}), 400
            vehicle.gearbox = gearbox_val
        if 'drive' in data:
            drive_val = str(data['drive']).strip()
            if not drive_val: return jsonify({'error': 'Drive type cannot be empty.'}), 400
            vehicle.drive = drive_val
        if 'power_hp' in data:
            power_hp_val = int(data['power_hp'])
            if not (0 < power_hp_val < 5000): return jsonify({'error': f'Invalid power_hp: {power_hp_val}.'}), 400
            vehicle.power_hp = power_hp_val
        if 'seats' in data:
            seats_val = int(data['seats'])
            if not (1 <= seats_val <= 20): return jsonify({'error': f'Invalid seats: {seats_val}.'}), 400
            vehicle.seats = seats_val
        if 'price_per_day_usd' in data:
            price_val = Decimal(data['price_per_day_usd'])
            if not (price_val > 0): return jsonify({'error': 'Price must be a positive value.'}), 400
            vehicle.price_per_day_usd = price_val
        if 'image_url' in data: vehicle.image_url = str(data.get('image_url', '')).strip() or None
        db.session.commit()
        app.logger.info(f"Admin updated vehicle ID: {vehicle_id}.")
        return jsonify({
            'vehicle_id': vehicle.vehicle_id, 'brand': vehicle.brand, 'model': vehicle.model,
            'body_type': vehicle.body_type, 'year': vehicle.year, 'gearbox': vehicle.gearbox,
            'drive': vehicle.drive, 'power_hp': vehicle.power_hp, 'seats': vehicle.seats,
            'price_per_day_usd': float(vehicle.price_per_day_usd), 'image_url': vehicle.image_url
        })
    except ValueError as ve:
        db.session.rollback()
        app.logger.warning(f"Admin update vehicle ID {vehicle_id}: Value error - {ve}. Data: {data}")
        return jsonify({'error': f'Invalid data type for a field: {ve}.'}), 400
    except Exception as e:
        db.session.rollback()
        app.logger.error(f"Error updating vehicle ID {vehicle_id}: {e}. Data: {data}", exc_info=True)
        return jsonify({'error': f'Could not update vehicle due to a server error.'}), 500

@app.route('/api/admin/vehicles/<string:vehicle_id>', methods=['DELETE'])
@admin_required
@cross_origin(origins="http://localhost:5173")
def admin_remove_vehicle(vehicle_id):
    try:
        vehicle = Vehicle.query.get_or_404(vehicle_id)

        Review.query.filter_by(vehicle_id=vehicle_id).delete(synchronize_session=False)

        OrderItem.query.filter_by(vehicle_id=vehicle_id).delete(synchronize_session=False)

        orphan_orders = (
            Order.query
                 .outerjoin(OrderItem, Order.id == OrderItem.order_id)
                 .filter(OrderItem.id == None)
                 .all()
        )
        for o in orphan_orders:
            db.session.delete(o)

        CartItem.query.filter_by(vehicle_id=vehicle_id).delete(synchronize_session=False)

        db.session.delete(vehicle)
        db.session.commit()

        app.logger.info(f"Admin deleted vehicle {vehicle_id}: "
                        f"{len(orphan_orders)} orphan orders cleaned.")
        return jsonify({'message': f'Vehicle {vehicle_id} deleted successfully.'}), 200

    except HTTPException as he:
        return jsonify({'error': he.description}), he.code

    except Exception as e:
        db.session.rollback()
        app.logger.error(f"Error deleting vehicle {vehicle_id}: {e}", exc_info=True)
        return jsonify({'error': 'Failed to delete vehicle due to server error.'}), 500


if __name__ == '__main__':
    app.logger.info("Starting Flask development server...")
    app.run(host='0.0.0.0', port=5000, debug=True, use_reloader=False)
```

### `backend\create_admin.py`

```python
from app import app, db, bcrypt
from models import User, Role

def add_admin_user(username, password):
    with app.app_context():
        admin_role = Role.query.filter_by(name='admin').first()
        if not admin_role:
            print("Роль 'admin' не найдена. Создаем...")
            admin_role = Role(name='admin')
            user_role = Role.query.filter_by(name='user').first()
            if not user_role:
                user_role = Role(name='user')
                db.session.add(user_role)
            db.session.add(admin_role)
            db.session.commit()
            print(f"Роль 'admin' создана с ID: {admin_role.id}")

        existing_user = User.query.filter_by(username=username).first()
        if existing_user:
            print(f"Пользователь '{username}' уже существует.")
            return

        hashed_password = bcrypt.generate_password_hash(password).decode('utf-8')
        new_admin = User(username=username, password_hash=hashed_password, role_id=admin_role.id)
        db.session.add(new_admin)
        db.session.commit()
        print(f"Администратор '{username}' успешно создан с ID: {new_admin.id} и ролью 'admin'.")

if __name__ == '__main__':
    admin_username = input("Введите имя пользователя для администратора: ")
    admin_password = input("Введите пароль для администратора: ")
    add_admin_user(admin_username, admin_password)
```

### `backend\database.py`

```python
from flask_sqlalchemy import SQLAlchemy
db = SQLAlchemy()
```

### `backend\load_data.py`

```python
import csv
import os
import logging
from decimal import Decimal

from flask_bcrypt import Bcrypt
from database import db
from models import User, Role, Order, OrderItem, Review, Vehicle
from app import app

# —————————————————————————————————————————————————————————
# Настройка логирования для скрипта
logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)
if not logger.handlers:
    handler = logging.StreamHandler()
    formatter = logging.Formatter(
        '%(asctime)s - %(name)s - [LOAD_DATA] - %(levelname)s - %(message)s'
    )
    handler.setFormatter(formatter)
    logger.addHandler(handler)
logger.propagate = False

bcrypt = Bcrypt(app)

BASE_DIR            = os.path.dirname(os.path.abspath(__file__))
USERS_CSV_PATH      = os.path.join(BASE_DIR, 'data', 'users.csv')
REVIEWS_CSV_PATH    = os.path.join(BASE_DIR, 'data', 'reviews.csv')
VEHICLES_CSV_PATH   = os.path.join(BASE_DIR, 'data', 'project_vehicle_dataset.csv')

def load_vehicles():
    """Загружает автомобили из CSV, если таблица пуста."""
    if Vehicle.query.first():
        logger.info("Vehicles table is not empty, skipping CSV load for vehicles.")
        return

    logger.info(f"Attempting to load vehicles from: {VEHICLES_CSV_PATH}")
    if not os.path.exists(VEHICLES_CSV_PATH):
        logger.warning(f"Vehicles CSV file not found at {VEHICLES_CSV_PATH}.")
        return

    vehicles_to_add = []
    with open(VEHICLES_CSV_PATH, newline='', encoding='utf-8') as f:
        reader = csv.DictReader(f)
        required = [
            'vehicle_id', 'brand', 'body_type', 'year', 'gearbox',
            'drive', 'power_hp', 'seats', 'price_per_day_usd'
        ]
        for i, row in enumerate(reader, start=1):
            if not all(row.get(col, '').strip() for col in required):
                logger.warning(f"Row {i}: missing required fields, skipping.")
                continue
            try:
                vid = row['vehicle_id'].strip()
                model_val = row.get('model', '').strip() or None
                img = row.get('image', '').strip()
                img = None if not img or img.lower() == 'n/a' else img.strip()

                v = Vehicle(
                    vehicle_id=vid,
                    brand=row['brand'].strip(),
                    model=model_val,
                    body_type=row['body_type'].strip(),
                    year=int(row['year']),
                    gearbox=row['gearbox'].strip(),
                    drive=row['drive'].strip(),
                    power_hp=int(row['power_hp']),
                    seats=int(row['seats']),
                    price_per_day_usd=Decimal(row['price_per_day_usd']),
                    image_url=img
                )
                vehicles_to_add.append(v)
            except Exception as e:
                logger.error(f"Row {i}: error parsing vehicle: {e}", exc_info=False)

    if vehicles_to_add:
        db.session.bulk_save_objects(vehicles_to_add)
        db.session.commit()
        logger.info(f"✔ Loaded {len(vehicles_to_add)} vehicles.")
    else:
        logger.info("No vehicles loaded (table empty or all rows invalid).")

def load_users_and_roles():
    """Создаёт роли и загружает пользователей из CSV, если таблица пуста.
       Гарантирует, что хотя бы один админ есть всегда."""
    user_role  = Role.query.filter_by(name='user').first()
    admin_role = Role.query.filter_by(name='admin').first()
    if not user_role:
        user_role = Role(name='user')
        db.session.add(user_role)
        logger.info("Created 'user' role.")
    if not admin_role:
        admin_role = Role(name='admin')
        db.session.add(admin_role)
        logger.info("Created 'admin' role.")
    db.session.commit()

    if User.query.first():
        logger.info("Users table is not empty, skipping CSV load for users.")
    else:
        if os.path.exists(USERS_CSV_PATH):
            logger.info(f"Attempting to load users from: {USERS_CSV_PATH}")
            added = 0
            with open(USERS_CSV_PATH, newline='', encoding='utf-8') as f:
                reader = csv.DictReader(f)
                for i, row in enumerate(reader, start=1):
                    try:
                        uid   = int(row['id'])
                        name  = row['name'].strip()
                        pw    = row['password'].strip()
                        if not name or not pw:
                            logger.warning(f"Row {i}: empty name or password, skipping.")
                            continue
                        pw_hash = bcrypt.generate_password_hash(pw).decode('utf-8')
                        role_id = user_role.id
                        if row.get('role', '').strip().lower() == 'admin':
                            role_id = admin_role.id

                        u = User(id=uid, username=name, password_hash=pw_hash, role_id=role_id)
                        db.session.add(u)
                        added += 1
                    except Exception as e:
                        logger.error(f"Row {i}: error parsing user: {e}", exc_info=False)

            if added:
                db.session.commit()
                logger.info(f"✔ Loaded {added} users from CSV.")
            else:
                logger.info("No users loaded from CSV (all rows invalid).")
        else:
            logger.warning(f"Users CSV not found at {USERS_CSV_PATH}, skipping CSV load.")

    admin_exists = User.query.join(Role).filter(Role.name=='admin').first()
    if not admin_exists:
        logger.info("No admin users found, creating default admin (admin/admin).")
        pw = bcrypt.generate_password_hash('admin').decode('utf-8')
        default_admin = User(username='admin', password_hash=pw, role_id=admin_role.id)
        db.session.add(default_admin)
        db.session.commit()
        logger.info("✔ Default admin user created: login=admin, password=admin.")

def load_reviews_and_orders():
    """Загружает отзывы из CSV и создаёт для каждого отзыв фейковый заказ."""
    if Review.query.first():
        logger.info("Reviews table is not empty, skipping CSV load for reviews.")
        return
    if not Vehicle.query.first() or not User.query.first():
        logger.info("Cannot load reviews: vehicles or users table is empty.")
        return

    logger.info(f"Attempting to load reviews/orders from: {REVIEWS_CSV_PATH}")
    if not os.path.exists(REVIEWS_CSV_PATH):
        logger.warning(f"Reviews CSV file not found at {REVIEWS_CSV_PATH}.")
        return

    valid_vids  = {str(v.vehicle_id) for v in Vehicle.query.with_entities(Vehicle.vehicle_id)}
    valid_uids  = {u.id for u in User.query.with_entities(User.id)}

    rev_count = 0
    ord_count = 0
    with open(REVIEWS_CSV_PATH, newline='', encoding='utf-8') as f:
        reader = csv.DictReader(f)
        for i, row in enumerate(reader, start=1):
            try:
                uid_str = row['user_id'].strip()
                vid     = row['vehicle_id'].strip()
                uid     = int(uid_str)
                rating  = float(row['rating'].strip())
                comment = row.get('comment', '').strip() or None

                if uid not in valid_uids:
                    logger.warning(f"Row {i}: user {uid} not found, skipping.")
                    continue
                if vid not in valid_vids:
                    logger.warning(f"Row {i}: vehicle '{vid}' not found, skipping.")
                    continue
                if Review.query.filter_by(user_id=uid, vehicle_id=vid).first():
                    continue

                order = Order(user_id=uid)
                db.session.add(order)
                db.session.flush()
                ord_count += 1

                veh = Vehicle.query.get(vid)
                price = veh.price_per_day_usd if veh else Decimal('0.00')
                oi = OrderItem(order_id=order.id, vehicle_id=vid, price=price)
                db.session.add(oi)

                rev = Review(
                    user_id=uid,
                    vehicle_id=vid,
                    order_id=order.id,
                    rating=int(rating*2)/2.0,
                    comment=comment
                )
                db.session.add(rev)
                rev_count += 1

            except Exception as e:
                logger.error(f"Row {i}: error processing review: {e}", exc_info=False)
                db.session.rollback()
                continue

    if rev_count or ord_count:
        db.session.commit()
        logger.info(f"✔ Loaded {rev_count} reviews and created {ord_count} orders.")
    else:
        logger.info("No reviews loaded (table empty or all rows invalid).")

if __name__ == "__main__":
    with app.app_context():
        logger.info("=== Data loading started ===")
        load_users_and_roles()
        load_vehicles()
        load_reviews_and_orders()
        logger.info("=== Data loading finished ===")

```

### `backend\manage.py`

```python
from flask_migrate import Migrate, MigrateCommand
from flask_script import Manager
from app import app, db

migrate = Migrate(app, db)
manager = Manager(app)

manager.add_command('db', MigrateCommand)

if __name__ == '__main__': 
    manager.run()
```

### `backend\models.py`

```python
from database import db
from datetime import datetime

class Role(db.Model):
    __tablename__ = 'roles'
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(64), unique=True, nullable=False)
    users = db.relationship('User', backref='role', lazy=True)

class User(db.Model):
    __tablename__ = 'users'
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(64), unique=True, nullable=False)
    password_hash = db.Column(db.String(128), nullable=False)
    role_id = db.Column(db.Integer, db.ForeignKey('roles.id'), nullable=False)
    cart_items = db.relationship('CartItem', backref='user', lazy=True, cascade="all, delete-orphan")
    orders     = db.relationship('Order',    backref='user', lazy=True)
    reviews    = db.relationship('Review',   backref='user', lazy=True)

class Vehicle(db.Model):
    __tablename__ = 'vehicles'
    vehicle_id        = db.Column(db.String(36), primary_key=True)
    brand             = db.Column(db.String(64), nullable=False)
    model             = db.Column(db.String(128), nullable=True)
    body_type         = db.Column(db.String(128), nullable=False)
    year              = db.Column(db.Integer, nullable=False)
    gearbox           = db.Column(db.String(30), nullable=False)
    drive             = db.Column(db.String(10), nullable=False)
    power_hp          = db.Column(db.Integer, nullable=False)
    seats             = db.Column(db.Integer, nullable=False)
    price_per_day_usd = db.Column(db.Numeric(10, 2), nullable=False)
    image_url         = db.Column(db.String(2048), nullable=True)
    reviews           = db.relationship('Review', backref='vehicle', lazy=True)

class CartItem(db.Model):
    __tablename__ = 'cart_items'
    id         = db.Column(db.Integer, primary_key=True)
    user_id    = db.Column(db.Integer, db.ForeignKey('users.id'), nullable=False)
    vehicle_id = db.Column(db.String(36), db.ForeignKey('vehicles.vehicle_id'), nullable=False)
    vehicle    = db.relationship('Vehicle', lazy='joined')
    
    __table_args__ = ( 
        db.UniqueConstraint('user_id', 'vehicle_id', name='uq_user_vehicle_cart'),
    )

class Order(db.Model):
    __tablename__ = 'orders'
    id          = db.Column(db.Integer, primary_key=True)
    user_id     = db.Column(db.Integer, db.ForeignKey('users.id'), nullable=False)
    created_at  = db.Column(db.DateTime, default=datetime.utcnow)
    items       = db.relationship('OrderItem', backref='order', lazy=True, cascade="all, delete-orphan")
    reviews     = db.relationship('Review', backref='order', lazy=True)

class OrderItem(db.Model):
    __tablename__ = 'order_items'
    id         = db.Column(db.Integer, primary_key=True)
    order_id   = db.Column(db.Integer, db.ForeignKey('orders.id'), nullable=False)
    vehicle_id = db.Column(db.String(36), db.ForeignKey('vehicles.vehicle_id'), nullable=False)
    price      = db.Column(db.Numeric(10, 2), nullable=False)
    vehicle    = db.relationship('Vehicle', lazy='joined')

class Review(db.Model):
    __tablename__ = 'reviews'
    id         = db.Column(db.Integer, primary_key=True)
    user_id    = db.Column(db.Integer, db.ForeignKey('users.id'), nullable=False)
    vehicle_id = db.Column(db.String(36), db.ForeignKey('vehicles.vehicle_id'), nullable=False)
    order_id   = db.Column(db.Integer, db.ForeignKey('orders.id'), nullable=False)
    rating     = db.Column(db.Integer, nullable=False)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    comment    = db.Column(db.Text, nullable=True)

    def __repr__(self):
        return f"<Review user:{self.user_id} vehicle:'{self.vehicle_id}' order:{self.order_id} rating:{self.rating}>"
```

### `backend\train_recommendation.py`

import pandas as pd
import numpy as np
import pickle
from sqlalchemy import create_engine
from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics.pairwise import cosine_similarity
from surprise import Dataset, Reader, KNNBasic
from collections import defaultdict

DB_USER = "root"
DB_PASSWORD = "123"
DB_HOST = "localhost"
DB_PORT     = 3306
DB_NAME = "db_name"

USER_CF_MODEL_FILE = 'user_knn_model.pkl'
CONTENT_MODEL_FILE = 'content_model.pkl'
HYBRID_MODEL_FILE  = 'hybrid_model.pkl'

ALPHA       = 0.7
K_NEIGHBORS = 40
TOP_K       = 10

# Загрузка данных
def load_data():
    conn_str = (
        f"mysql+pymysql://{DB_USER}:{DB_PASSWORD}"
        f"@{DB_HOST}:{DB_PORT}/{DB_NAME}"
    )
    engine = create_engine(conn_str)

    # истории заказов
    df_orders = pd.read_sql(
        """
        SELECT
          o.user_id,
          oi.vehicle_id     AS car_id,
          o.created_at      AS order_date
        FROM orders AS o
        JOIN order_items AS oi
          ON o.id = oi.order_id;
        """,
        engine
    )

    # отзывы
    df_reviews = pd.read_sql(
        "SELECT user_id, vehicle_id AS car_id, rating FROM reviews;",
        engine
    )

    # характеристики авто
    df_cars = pd.read_sql(
        """
        SELECT
          vehicle_id        AS car_id,
          model,
          drive             AS drive_type,
          year,
          power_hp,
          seats
        FROM vehicles;
        """,
        engine
    )

    return df_orders, df_reviews, df_cars


# Предобработка
def prepare_interactions(df_orders, df_reviews):
    df = pd.merge(df_orders, df_reviews, on=['user_id','car_id'], how='left')
    df['rating'] = df['rating'].fillna(3.0)
    df['order_date'] = pd.to_datetime(df['order_date'])
    df.sort_values('order_date', inplace=True)
    return df

def train_test_split(df_int):
    train_list, test_list = [], []
    for uid, grp in df_int.groupby('user_id'):
        recs = grp.to_dict('records')
        if len(recs) <= 1:
            test_list.extend(recs)
        else:
            *train_entries, test_entry = recs
            train_list.extend(train_entries)
            test_list.append(test_entry)
    return pd.DataFrame(train_list), pd.DataFrame(test_list)


# Построение моделей
def build_cf_model(df_train):
    reader   = Reader(rating_scale=(1,5))
    data     = Dataset.load_from_df(df_train[['user_id','car_id','rating']], reader)
    trainset = data.build_full_trainset()
    algo     = KNNBasic(k=K_NEIGHBORS, sim_options={'name':'cosine','user_based':True})
    algo.fit(trainset)
    return algo

def build_content_model(df_cars):
    df_feat = df_cars.set_index('car_id')
    features = ['model','drive_type','year','power_hp','seats']
    df_feat = pd.get_dummies(df_feat[features], columns=['model','drive_type'], drop_first=False)
    scaler  = MinMaxScaler()
    df_feat[['year','power_hp','seats']] = scaler.fit_transform(df_feat[['year','power_hp','seats']])
    X       = df_feat.values
    sim     = cosine_similarity(X, X)
    return df_feat, sim

# История пользователей
def build_user_history(df_train):
    return df_train.groupby('user_id')['car_id'].apply(list).to_dict()


# Рекомендательные функции
def recommend_content(user_id, df_feat, sim, history, top_n=TOP_K):
    cars = df_feat.index.tolist()
    seen = history.get(user_id, [])
    if not seen:
        return []
    idxs = [cars.index(c) for c in seen if c in cars]
    scores = sim[:, idxs].mean(axis=1)
    candidates = [(cars[i], scores[i]) for i in range(len(cars)) if cars[i] not in seen]
    candidates.sort(key=lambda x: x[1], reverse=True)
    return candidates[:top_n]

def recommend_hybrid(user_id, cf_algo, df_feat, sim, history,
                     item_mean, popular, alpha=ALPHA, top_n=TOP_K):
    cars = df_feat.index.tolist()
    seen = set(history.get(user_id, []))

    cf_scores = {c: (cf_algo.predict(user_id, c).est if c not in seen else 0)
                 for c in cars}
    # content-based
    cb_scores = {}
    if seen:
        idxs = [cars.index(c) for c in seen if c in cars]
        base = sim[:, idxs].mean(axis=1) if idxs else np.zeros(len(cars))
        for i,c in enumerate(cars):
            if c not in seen:
                cb_scores[c] = base[i] * 5
    else:
        return popular[:top_n]

    # hybrid
    hybrid = {c: alpha*cf_scores.get(c,0) + (1-alpha)*cb_scores.get(c,0)
              for c in cf_scores if c not in seen}
    ranked = sorted(hybrid.items(), key=lambda x: x[1], reverse=True)
    return ranked[:top_n]

# Оценка качества
def evaluate(rec_func, df_test, history, name, top_n=TOP_K):
    relevant = defaultdict(set)
    for _,r in df_test.iterrows():
        relevant[r['user_id']].add(r['car_id'])

    ps, rs, aps = [],[],[]
    for uid, trues in relevant.items():
        recs = [c for c,_ in rec_func(uid)]
        if not recs: continue
        hits = sum(1 for c in recs if c in trues)
        ps.append(hits/top_n)
        rs.append(hits/len(trues))
        cum, ap = 0,0
        for i,c in enumerate(recs,1):
            if c in trues:
                cum += 1
                ap += cum/i
        aps.append(ap/len(trues))

    print(f"{name}: P@{top_n}={np.mean(ps):.3f}, "
          f"R@{top_n}={np.mean(rs):.3f}, MAP@{top_n}={np.mean(aps):.3f}")

# main
def main():
    df_orders, df_reviews, df_cars = load_data()
    df_int    = prepare_interactions(df_orders, df_reviews)
    df_train, df_test = train_test_split(df_int)

    cf_algo = build_cf_model(df_train)
    feat, sim = build_content_model(df_cars)
    history = build_user_history(df_train)

    item_mean = df_train.groupby('car_id')['rating'].mean().to_dict()
    popular   = sorted(item_mean.items(), key=lambda x: x[1], reverse=True)

    evaluate(lambda u: recommend_hybrid(u, cf_algo, feat, sim, history, item_mean, popular),
             df_test, history, "Hybrid")
    evaluate(lambda u: recommend_content(u, feat, sim, history),
             df_test, history, "Content-based")
    evaluate(lambda u: recommend_hybrid(u, cf_algo, feat, sim, history, item_mean, popular, alpha=1.0),
             df_test, history, "User-based CF")

    # сохраняем
    with open(USER_CF_MODEL_FILE, 'wb')    as f: pickle.dump(cf_algo, f)
    with open(CONTENT_MODEL_FILE, 'wb')    as f: pickle.dump({'features': feat, 'cars': feat.index.tolist()}, f)
    with open(HYBRID_MODEL_FILE, 'wb')     as f: pickle.dump({'cf': cf_algo,'features':feat,'sim':sim,'alpha':ALPHA,'popular':popular}, f)

    print("Models saved.")

if __name__ == '__main__':
    main()

### `backend\Recommendations.ipynb`

```ipynb
{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "8fbe5b67-6997-4f1a-8a59-36f2a182e2bf",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Попытка загрузки vehicles из CSV: C:\\Users\\Kirill\\Desktop\\Диплом\\backend\\data\\project_vehicle_dataset.csv\n",
      "Vehicles загружены из CSV: (450, 11)\n",
      "Попытка загрузки reviews из CSV: C:\\Users\\Kirill\\Desktop\\Диплом\\backend\\data\\reviews.csv\n",
      "Reviews загружены из CSV: (2000, 5)\n",
      "\n",
      "--- Информация о данных (до фильтрации) ---\n",
      "Vehicles shape: (450, 11)\n",
      "Reviews shape: (2000, 5)\n",
      "\n",
      "Первые 5 строк vehicles:\n",
      "                             vehicle_id   brand         model  \\\n",
      "0  745eb271-c470-49fd-b1d1-494c01fa8034  toyota  camry solara   \n",
      "1  5546fe1e-8629-4ee0-bf63-793d2b71e149  toyota       corolla   \n",
      "2  22bb3b0f-8df7-426d-a2a5-fb0ee3a3e6f1  toyota       prius v   \n",
      "3  9baf2474-3fd9-42d5-8c6c-901865ee39a7  toyota         gr 86   \n",
      "4  34433d7a-2b42-4f2b-bd5c-79fa0ce36a54  toyota           mr2   \n",
      "\n",
      "               body_type  year    gearbox drive  power_hp  seats  \\\n",
      "0                Compact  2008     Manual   FWD       620      2   \n",
      "1                Compact  1993  Automatic   FWD       430      5   \n",
      "2  Midsize station wagon  2017  Automatic   FWD       336      3   \n",
      "3            Minicompact  2023  Automatic   RWD       278      6   \n",
      "4             Two seater  2005     Manual   RWD       672      5   \n",
      "\n",
      "   price_per_day_usd                                              image  \n",
      "0             127.98  http://images.thecarconnection.com/lrg/2008-to...  \n",
      "1             175.36     http://momentcar.com/images/1993-corolla-1.jpg  \n",
      "2              30.76  https://images.hgmsites.net/hug/2017-toyota-pr...  \n",
      "3             278.18  https://www.carpixel.net/w/a75a29621a27570c3df...  \n",
      "4              38.30  https://blog.consumerguide.com/wp-content/uplo...  \n",
      "\n",
      "Первые 5 строк reviews:\n",
      "   id user_id                            vehicle_id  rating  \\\n",
      "0   1       1  149a2a22-0840-45d0-8ca8-594ed39fe03a     5.0   \n",
      "1   2       1  74affd3a-3465-4afd-9abd-0c83ec973bcd     5.0   \n",
      "2   3       1  11e6afbd-b9d0-427b-96dd-d591e43974c6     2.5   \n",
      "3   4       1  56519941-e9fd-4ce2-a947-4dd2ef911fff     4.5   \n",
      "4   5       2  1b87ccb7-f1d5-44e8-9697-3c6ccbd5aac7     5.0   \n",
      "\n",
      "                    comment  \n",
      "0    Все супер, рекомендую.  \n",
      "1       Буду брать ещё раз!  \n",
      "2  Не дотянула до ожиданий.  \n",
      "3    Все супер, рекомендую.  \n",
      "4          Проблем не было.  \n",
      "\n",
      "Статистика по рейтингам:\n",
      "count    2000.00000\n",
      "mean        3.38400\n",
      "std         1.12224\n",
      "min         1.00000\n",
      "25%         3.00000\n",
      "50%         3.50000\n",
      "75%         4.00000\n",
      "max         5.00000\n",
      "Name: rating, dtype: float64\n",
      "\n",
      "Начальный размер reviews: 2000\n",
      "Reviews после фильтрации по популярности авто (min_ratings=5): 1322\n",
      "Reviews после фильтрации по активности пользователей (min_ratings=5): 223\n",
      "Размер vehicles после фильтрации: 142\n",
      "Установлены MIN_RATING_GLOBAL=1, MAX_RATING_GLOBAL=5\n",
      "Train_df: (178, 3), Test_df: (45, 3)\n",
      "User-based CF: k_user_cf=20, n_samples_fit_=42\n",
      "User-based CF: {'RMSE': np.float64(1.208666620702334), 'MAE': 0.9616666666666667, 'R2': -0.2569670172084131, 'Accuracy (Rounded)': 0.4222222222222222}\n",
      "Content-based: X_items_transformed shape: (142, 91)\n",
      "Content-based CF: k_item_cf=20, n_samples_fit_=142\n",
      "Content-based CF: {'RMSE': np.float64(1.4272448205468387), 'MAE': 1.1266666666666667, 'R2': -0.7527007648183555, 'Accuracy (Rounded)': 0.35555555555555557}\n",
      "\n",
      "--- Подбор alpha для гибридной модели ---\n",
      "Alpha: 0.0, RMSE: 1.4272, MAE: 1.1267, R2: -0.7527, Acc (rnd): 0.3556\n",
      "Alpha: 0.1, RMSE: 1.3907, MAE: 1.1001, R2: -0.6641, Acc (rnd): 0.3333\n",
      "Alpha: 0.2, RMSE: 1.3569, MAE: 1.0734, R2: -0.5841, Acc (rnd): 0.3333\n",
      "Alpha: 0.3, RMSE: 1.3260, MAE: 1.0468, R2: -0.5129, Acc (rnd): 0.3333\n",
      "Alpha: 0.4, RMSE: 1.2983, MAE: 1.0224, R2: -0.4503, Acc (rnd): 0.3333\n",
      "Alpha: 0.5, RMSE: 1.2739, MAE: 1.0081, R2: -0.3964, Acc (rnd): 0.3111\n",
      "Alpha: 0.6, RMSE: 1.2531, MAE: 0.9966, R2: -0.3511, Acc (rnd): 0.3333\n",
      "Alpha: 0.7, RMSE: 1.2361, MAE: 0.9878, R2: -0.3146, Acc (rnd): 0.3778\n",
      "Alpha: 0.8, RMSE: 1.2229, MAE: 0.9791, R2: -0.2867, Acc (rnd): 0.3778\n",
      "Alpha: 0.9, RMSE: 1.2137, MAE: 0.9704, R2: -0.2675, Acc (rnd): 0.3778\n",
      "Alpha: 1.0, RMSE: 1.2087, MAE: 0.9617, R2: -0.2570, Acc (rnd): 0.4222\n",
      "\n",
      "Лучший alpha для гибридной модели: 1.0\n",
      "Лучшие метрики для гибридной модели (α=1.0): {'RMSE': np.float64(1.208666620702334), 'MAE': 0.9616666666666667, 'R2': -0.2569670172084131, 'Accuracy (Rounded)': 0.4222222222222222}\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1800x500 with 3 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Артефакты модели сохранены в C:\\Users\\Kirill\\Desktop\\Диплом\\backend\\models\\recommendation_artifacts_csv.joblib\n",
      "Сохраненные артефакты: ['global_mean_rating', 'MIN_RATING', 'MAX_RATING', 'best_alpha_hybrid', 'user_knn', 'train_centered_index', 'train_centered_columns', 'user_means', 'train_matrix_columns', 'train_matrix_index', 'item_knn', 'item_pipeline', 'X_items_df_index', 'X_items_df_used_cat_features', 'X_items_df_used_num_features', 'user_rated_history']\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1600x800 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.neighbors import NearestNeighbors\n",
    "from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score, accuracy_score\n",
    "from sklearn.preprocessing import StandardScaler, OneHotEncoder\n",
    "from sklearn.compose import ColumnTransformer\n",
    "from sklearn.pipeline import Pipeline\n",
    "import joblib\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import os\n",
    "\n",
    "MIN_RATING_GLOBAL = 1\n",
    "MAX_RATING_GLOBAL = 5\n",
    "\n",
    "def evaluate(y_true, y_pred):\n",
    "    y_true_arr = np.array(y_true)\n",
    "    y_pred_arr = np.array(y_pred)\n",
    "    valid_indices = ~np.isnan(y_true_arr) & ~np.isnan(y_pred_arr)\n",
    "    if not np.all(valid_indices):\n",
    "        print(f\"Warning: NaNs found during evaluation. Removing {np.sum(~valid_indices)} pairs.\")\n",
    "        y_true_arr = y_true_arr[valid_indices]\n",
    "        y_pred_arr = y_pred_arr[valid_indices]\n",
    "\n",
    "    if len(y_true_arr) == 0:\n",
    "        return {'RMSE': np.nan, 'MAE': np.nan, 'R2': np.nan, 'Accuracy (Rounded)': np.nan}\n",
    "    \n",
    "    rmse = np.sqrt(mean_squared_error(y_true_arr, y_pred_arr))\n",
    "    mae  = mean_absolute_error(y_true_arr, y_pred_arr)\n",
    "    r2   = r2_score(y_true_arr, y_pred_arr)\n",
    "\n",
    "    y_true_rounded = np.round(y_true_arr).astype(int)\n",
    "    y_pred_rounded = np.round(y_pred_arr).astype(int)\n",
    "    \n",
    "    current_min_rating = MIN_RATING_GLOBAL \n",
    "    current_max_rating = MAX_RATING_GLOBAL\n",
    "    \n",
    "    y_true_rounded = np.clip(y_true_rounded, current_min_rating, current_max_rating)\n",
    "    y_pred_rounded = np.clip(y_pred_rounded, current_min_rating, current_max_rating)\n",
    "\n",
    "    accuracy_rounded = accuracy_score(y_true_rounded, y_pred_rounded) if len(y_true_rounded) > 0 else np.nan\n",
    "\n",
    "    return {'RMSE': rmse, 'MAE': mae, 'R2': r2, 'Accuracy (Rounded)': accuracy_rounded}\n",
    "\n",
    "vehicles_csv_path = r\"C:\\Users\\Kirill\\Desktop\\Диплом\\backend\\data\\project_vehicle_dataset.csv\"\n",
    "reviews_csv_path = r\"C:\\Users\\Kirill\\Desktop\\Диплом\\backend\\data\\reviews.csv\" \n",
    "\n",
    "vehicles_orig = pd.DataFrame()\n",
    "reviews_orig = pd.DataFrame()\n",
    "\n",
    "try:\n",
    "    print(f\"Попытка загрузки vehicles из CSV: {vehicles_csv_path}\")\n",
    "    vehicles_orig = pd.read_csv(vehicles_csv_path)\n",
    "    vehicles_orig['vehicle_id'] = vehicles_orig['vehicle_id'].astype(str).str.strip()\n",
    "    print(f\"Vehicles загружены из CSV: {vehicles_orig.shape}\")\n",
    "\n",
    "    if reviews_csv_path and os.path.exists(reviews_csv_path):\n",
    "        print(f\"Попытка загрузки reviews из CSV: {reviews_csv_path}\")\n",
    "        reviews_orig = pd.read_csv(reviews_csv_path)\n",
    "        reviews_orig['vehicle_id'] = reviews_orig['vehicle_id'].astype(str).str.strip()\n",
    "        if 'user_id' in reviews_orig.columns:\n",
    "             reviews_orig['user_id'] = reviews_orig['user_id'].astype(str).str.strip()\n",
    "        print(f\"Reviews загружены из CSV: {reviews_orig.shape}\")\n",
    "    else:\n",
    "        print(\"CSV файл с отзывами не найден или не указан. Генерация dummy отзывов (обычная)...\")\n",
    "        if vehicles_orig.empty or 'vehicle_id' not in vehicles_orig.columns:\n",
    "            raise ValueError(\"Vehicles_orig пуст или не содержит 'vehicle_id' для генерации dummy отзывов.\")\n",
    "\n",
    "        n_users_dummy, n_reviews_per_vehicle_dummy = 70, 5 \n",
    "        n_reviews_total_dummy = max(500, len(vehicles_orig) * n_reviews_per_vehicle_dummy) \n",
    "\n",
    "        valid_vehicle_ids_for_reviews = vehicles_orig['vehicle_id'].unique()\n",
    "        if len(valid_vehicle_ids_for_reviews) == 0:\n",
    "            raise ValueError(\"В загруженных vehicles нет уникальных vehicle_id для генерации dummy отзывов.\")\n",
    "\n",
    "        reviews_orig = pd.DataFrame({\n",
    "            'review_id': range(1, n_reviews_total_dummy + 1),\n",
    "            'user_id': [str(uid) for uid in np.random.randint(1, n_users_dummy + 1, n_reviews_total_dummy)],\n",
    "            'vehicle_id': np.random.choice(valid_vehicle_ids_for_reviews, n_reviews_total_dummy, replace=True),\n",
    "            'rating': np.random.randint(1, 6, n_reviews_total_dummy) \n",
    "        })\n",
    "        print(f\"Сгенерированы dummy отзывы (обычные): {reviews_orig.shape}\")\n",
    "        if 'user_id' in reviews_orig.columns:\n",
    "            reviews_orig['user_id'] = reviews_orig['user_id'].astype(str)\n",
    "\n",
    "except Exception as e:\n",
    "    print(f\"Ошибка при загрузке данных из CSV: {e}\")\n",
    "    print(\"Создание УЛУЧШЕННЫХ dummy данных для vehicles и reviews для демонстрации...\")\n",
    "    n_users, n_vehicles, n_reviews = 70, 150, 2000 # Увеличим количество для более стабильных результатов\n",
    "\n",
    "    # Улучшенная генерация dummy vehicles\n",
    "    good_brands_internal = ['Toyota_g', 'Honda_g', 'BMW_g'] # _g для внутреннего использования\n",
    "    bad_brands_internal = ['OldBrand_b', 'CheapBrand_b'] # _b для внутреннего\n",
    "    neutral_brands_internal = ['Ford_n', 'Audi_n', 'VW_n', 'Mercedes_n', 'Nissan_n']\n",
    "    all_brands_internal = good_brands_internal + bad_brands_internal + neutral_brands_internal\n",
    "    \n",
    "    vehicles_list = []\n",
    "    for i in range(1, n_vehicles + 1):\n",
    "        internal_brand = np.random.choice(all_brands_internal)\n",
    "        brand = internal_brand.split('_')[0] # Очищенное имя бренда\n",
    "        \n",
    "        body_type = np.random.choice(['Sedan', 'SUV', 'Hatchback', 'Coupe', 'Minivan', 'Pickup'])\n",
    "        \n",
    "        base_price = np.random.uniform(40, 160)\n",
    "        power = np.random.randint(90, 250)\n",
    "        year = np.random.randint(2010, 2024)\n",
    "\n",
    "        if internal_brand in good_brands_internal:\n",
    "            base_price *= np.random.uniform(1.3, 1.7)\n",
    "            power = int(power * np.random.uniform(1.2, 1.5))\n",
    "        elif internal_brand in bad_brands_internal:\n",
    "            base_price *= np.random.uniform(0.6, 0.9)\n",
    "            power = int(power * np.random.uniform(0.7, 0.9))\n",
    "        \n",
    "        if body_type == 'SUV': base_price *= 1.15\n",
    "        elif body_type == 'Coupe': base_price *= 1.25\n",
    "        \n",
    "        base_price *= (1 + (year - 2010) * 0.04)\n",
    "        power = min(max(80, power), 500) # Ограничим мощность\n",
    "        base_price = max(15, base_price) # Мин цена\n",
    "            \n",
    "        vehicles_list.append({\n",
    "            'vehicle_id': str(i), 'brand': brand, 'model': f'Model_{brand[:2].upper()}{i}',\n",
    "            'body_type': body_type, 'gearbox': np.random.choice(['Automatic', 'Manual', 'CVT']),\n",
    "            'drive': np.random.choice(['FWD', 'RWD', 'AWD']), 'year': year,\n",
    "            'power_hp': power, 'seats': np.random.randint(2, 8),\n",
    "            'price_per_day_usd': round(base_price, 2)\n",
    "        })\n",
    "    vehicles_orig = pd.DataFrame(vehicles_list)\n",
    "    vehicle_ids_for_dummy_reviews = vehicles_orig['vehicle_id'].unique()\n",
    "\n",
    "    # Улучшенная генерация dummy reviews\n",
    "    temp_vehicles_df = vehicles_orig.copy()\n",
    "    # Восстанавливаем внутренние маркеры для генерации рейтингов\n",
    "    temp_vehicles_df['internal_brand_marker'] = temp_vehicles_df.apply(\n",
    "        lambda row: next((b for b in all_brands_internal if b.startswith(row['brand'])), None), axis=1\n",
    "    )\n",
    "\n",
    "    reviews_list = []\n",
    "    user_preferences = {} \n",
    "    for user_id_int in range(1, n_users + 1):\n",
    "        prefs = {}\n",
    "        if np.random.rand() < 0.4: prefs['fav_brand_type'] = np.random.choice(['good', 'neutral'])\n",
    "        else: prefs['fav_brand_type'] = 'any'\n",
    "        if np.random.rand() < 0.3: prefs['fav_body'] = np.random.choice(vehicles_orig['body_type'].unique())\n",
    "        user_preferences[str(user_id_int)] = prefs\n",
    "        \n",
    "    for review_idx in range(1, n_reviews + 1):\n",
    "        user_id = str(np.random.randint(1, n_users + 1))\n",
    "        vehicle_id = np.random.choice(vehicle_ids_for_dummy_reviews)\n",
    "        \n",
    "        vehicle_info = temp_vehicles_df.loc[temp_vehicles_df['vehicle_id'] == vehicle_id].iloc[0]\n",
    "        \n",
    "        # Базовое смещение для рейтинга\n",
    "        rating_offset = 0\n",
    "        vehicle_internal_brand = vehicle_info['internal_brand_marker']\n",
    "\n",
    "        if vehicle_internal_brand in good_brands_internal: rating_offset += np.random.uniform(0.8, 1.5)\n",
    "        elif vehicle_internal_brand in bad_brands_internal: rating_offset -= np.random.uniform(0.8, 1.5)\n",
    "        \n",
    "        if vehicle_info['body_type'] == 'SUV': rating_offset += np.random.uniform(0.2, 0.5)\n",
    "        if vehicle_info['year'] > 2018: rating_offset += np.random.uniform(0.1, 0.4)\n",
    "\n",
    "        # Учитываем предпочтения пользователя\n",
    "        user_prefs = user_preferences.get(user_id, {})\n",
    "        if user_prefs.get('fav_brand_type') == 'good' and vehicle_internal_brand in good_brands_internal:\n",
    "            rating_offset += np.random.uniform(0.5, 1.0)\n",
    "        elif user_prefs.get('fav_brand_type') == 'neutral' and vehicle_internal_brand in neutral_brands_internal:\n",
    "             rating_offset += np.random.uniform(0.2, 0.6)\n",
    "        if user_prefs.get('fav_body') == vehicle_info['body_type']:\n",
    "            rating_offset += np.random.uniform(0.3, 0.7)\n",
    "\n",
    "        # \"Центр\" распределения рейтинга - 3. Добавляем смещение и немного шума\n",
    "        raw_rating = 3.0 + rating_offset + np.random.normal(0, 0.7)\n",
    "        rating = int(np.clip(np.round(raw_rating), 1, 5)) # Округляем и клипаем\n",
    "        \n",
    "        reviews_list.append({'review_id': review_idx, 'user_id': user_id, 'vehicle_id': vehicle_id, 'rating': rating})\n",
    "    reviews_orig = pd.DataFrame(reviews_list)\n",
    "    print(f\"Сгенерированы УЛУЧШЕННЫЕ dummy отзывы: {reviews_orig.shape}\")\n",
    "\n",
    "\n",
    "vehicles = vehicles_orig.copy()\n",
    "reviews = reviews_orig.copy()\n",
    "\n",
    "if 'user_id' in reviews.columns: reviews['user_id'] = reviews['user_id'].astype(str)\n",
    "if 'vehicle_id' in reviews.columns: reviews['vehicle_id'] = reviews['vehicle_id'].astype(str)\n",
    "if 'vehicle_id' in vehicles.columns: vehicles['vehicle_id'] = vehicles['vehicle_id'].astype(str)\n",
    "\n",
    "\n",
    "print(\"\\n--- Информация о данных (до фильтрации) ---\")\n",
    "print(\"Vehicles shape:\", vehicles.shape)\n",
    "print(\"Reviews shape:\", reviews.shape)\n",
    "if not vehicles.empty:\n",
    "    print(\"\\nПервые 5 строк vehicles:\")\n",
    "    print(vehicles.head())\n",
    "    key_vehicle_cols = ['vehicle_id', 'brand', 'model', 'body_type', 'year', 'gearbox', 'drive', 'power_hp', 'seats', 'price_per_day_usd']\n",
    "    for col in key_vehicle_cols:\n",
    "        if col in vehicles.columns and vehicles[col].isnull().any():\n",
    "            print(f\"Warning: Обнаружены NaN в vehicles['{col}'].\")\n",
    "            if vehicles[col].dtype in [np.float64, np.int64] and col not in ['year', 'seats']:\n",
    "                 vehicles[col] = vehicles[col].fillna(vehicles[col].median())\n",
    "            elif vehicles[col].dtype == 'object' and col not in ['vehicle_id', 'model']:\n",
    "                 mode_val = vehicles[col].mode()\n",
    "                 vehicles[col] = vehicles[col].fillna(mode_val[0] if not mode_val.empty else 'Unknown')\n",
    "\n",
    "if not reviews.empty:\n",
    "    print(\"\\nПервые 5 строк reviews:\")\n",
    "    print(reviews.head())\n",
    "    if 'rating' in reviews.columns:\n",
    "        print(\"\\nСтатистика по рейтингам:\")\n",
    "        print(reviews['rating'].describe())\n",
    "        plt.figure(figsize=(8, 5)); sns.histplot(reviews['rating'], bins=reviews['rating'].nunique(), kde=False, discrete=True)\n",
    "        plt.title('Распределение рейтингов'); plt.xlabel('Рейтинг'); plt.ylabel('Количество')\n",
    "        # plt.show() \n",
    "\n",
    "    if 'user_id' in reviews.columns and 'rating' in reviews.columns:\n",
    "        user_rating_counts = reviews.groupby('user_id')['rating'].count()\n",
    "        plt.figure(figsize=(10, 6)); sns.histplot(user_rating_counts, bins=30, kde=False)\n",
    "        plt.title('Распределение количества оценок на пользователя'); plt.xlabel('Количество оценок'); plt.ylabel('Количество пользователей')\n",
    "        if not user_rating_counts.empty: plt.xlim(0, user_rating_counts.quantile(0.99) if user_rating_counts.quantile(0.99) > 0 else 10)\n",
    "        # plt.show() \n",
    "\n",
    "    if 'vehicle_id' in reviews.columns and 'rating' in reviews.columns:\n",
    "        vehicle_rating_counts = reviews.groupby('vehicle_id')['rating'].count()\n",
    "        plt.figure(figsize=(10, 6)); sns.histplot(vehicle_rating_counts, bins=30, kde=False)\n",
    "        plt.title('Распределение количества оценок на автомобиль'); plt.xlabel('Количество оценок'); plt.ylabel('Количество автомобилей')\n",
    "        if not vehicle_rating_counts.empty: plt.xlim(0, vehicle_rating_counts.quantile(0.99) if vehicle_rating_counts.quantile(0.99) > 0 else 10)\n",
    "        # plt.show() \n",
    "\n",
    "if not reviews.empty and not vehicles.empty and \\\n",
    "   'vehicle_id' in reviews.columns and 'user_id' in reviews.columns and \\\n",
    "   'vehicle_id' in vehicles.columns:\n",
    "\n",
    "    # ИЗМЕНЕНИЕ: Более строгая фильтрация\n",
    "    min_vehicle_ratings = 5 \n",
    "    min_user_ratings = 5    \n",
    "\n",
    "    print(f\"\\nНачальный размер reviews: {len(reviews)}\")\n",
    "    vehicle_counts = reviews['vehicle_id'].value_counts()\n",
    "    popular_vehicles_ids = vehicle_counts[vehicle_counts >= min_vehicle_ratings].index\n",
    "    reviews = reviews[reviews['vehicle_id'].isin(popular_vehicles_ids)]\n",
    "    print(f\"Reviews после фильтрации по популярности авто (min_ratings={min_vehicle_ratings}): {len(reviews)}\")\n",
    "\n",
    "    if not reviews.empty: \n",
    "        user_counts = reviews['user_id'].value_counts()\n",
    "        active_users_ids = user_counts[user_counts >= min_user_ratings].index\n",
    "        reviews = reviews[reviews['user_id'].isin(active_users_ids)]\n",
    "        print(f\"Reviews после фильтрации по активности пользователей (min_ratings={min_user_ratings}): {len(reviews)}\")\n",
    "    else:\n",
    "        print(\"Reviews стали пустыми после фильтрации по популярности авто.\")\n",
    "\n",
    "    if not reviews.empty:\n",
    "        remaining_vehicle_ids = reviews['vehicle_id'].unique()\n",
    "        vehicles = vehicles[vehicles['vehicle_id'].isin(remaining_vehicle_ids)]\n",
    "    else:\n",
    "        print(\"Reviews пусты после фильтрации, vehicles также будут пустыми.\")\n",
    "        vehicles = pd.DataFrame(columns=vehicles_orig.columns) # Сохраняем колонки\n",
    "\n",
    "    print(f\"Размер vehicles после фильтрации: {len(vehicles)}\")\n",
    "\n",
    "    if reviews.empty or vehicles.empty:\n",
    "        print(\"После фильтрации не осталось данных. Возврат к исходным данным (до фильтрации).\")\n",
    "        reviews = reviews_orig.copy()\n",
    "        vehicles = vehicles_orig.copy()\n",
    "        if 'user_id' in reviews.columns: reviews['user_id'] = reviews['user_id'].astype(str)\n",
    "        if 'vehicle_id' in reviews.columns: reviews['vehicle_id'] = reviews['vehicle_id'].astype(str)\n",
    "        if 'vehicle_id' in vehicles.columns: vehicles['vehicle_id'] = vehicles['vehicle_id'].astype(str)\n",
    "\n",
    "if not reviews.empty and 'rating' in reviews.columns and reviews['rating'].notna().any():\n",
    "    MIN_RATING_GLOBAL = int(reviews['rating'].min())\n",
    "    MAX_RATING_GLOBAL = int(reviews['rating'].max())\n",
    "else:\n",
    "    MIN_RATING_GLOBAL, MAX_RATING_GLOBAL = 1, 5\n",
    "print(f\"Установлены MIN_RATING_GLOBAL={MIN_RATING_GLOBAL}, MAX_RATING_GLOBAL={MAX_RATING_GLOBAL}\")\n",
    "\n",
    "\n",
    "if not reviews.empty and all(col in reviews.columns for col in ['user_id', 'vehicle_id', 'rating']):\n",
    "    df = reviews[['user_id','vehicle_id','rating']].copy()\n",
    "    df['rating'] = pd.to_numeric(df['rating'], errors='coerce')\n",
    "    df.dropna(subset=['rating'], inplace=True)\n",
    "else:\n",
    "    df = pd.DataFrame(columns=['user_id','vehicle_id','rating'])\n",
    "\n",
    "\n",
    "if not df.empty:\n",
    "    can_stratify = False\n",
    "    if 'user_id' in df.columns:\n",
    "        user_value_counts = df['user_id'].value_counts()\n",
    "        if not user_value_counts.empty and user_value_counts.min() >= 2: can_stratify = True\n",
    "            \n",
    "    train_df, test_df = train_test_split(df, test_size=0.2, random_state=42,\n",
    "                                         stratify=df['user_id'] if can_stratify else None)\n",
    "else:\n",
    "    train_df, test_df = pd.DataFrame(columns=df.columns), pd.DataFrame(columns=df.columns)\n",
    "print(f\"Train_df: {train_df.shape}, Test_df: {test_df.shape}\")\n",
    "\n",
    "\n",
    "if not train_df.empty:\n",
    "    global_mean_rating = train_df['rating'].mean()\n",
    "    if pd.isna(global_mean_rating): global_mean_rating = (MIN_RATING_GLOBAL + MAX_RATING_GLOBAL) / 2.0\n",
    "\n",
    "    train_matrix = train_df.pivot_table(index='user_id', columns='vehicle_id', values='rating')\n",
    "    user_means   = train_matrix.mean(axis=1).fillna(global_mean_rating)\n",
    "    train_centered = train_matrix.sub(user_means, axis=0).fillna(0)\n",
    "else:\n",
    "    global_mean_rating = (MIN_RATING_GLOBAL + MAX_RATING_GLOBAL) / 2.0\n",
    "    train_matrix = pd.DataFrame()\n",
    "    user_means = pd.Series(dtype=float)\n",
    "    train_centered = pd.DataFrame()\n",
    "\n",
    "user_knn = None\n",
    "if not train_centered.empty and len(train_centered.index) > 1:\n",
    "    # ИЗМЕНЕНИЕ: Увеличение k\n",
    "    k_user_cf = min(20, len(train_centered.index) -1 if len(train_centered.index) > 1 else 1) \n",
    "    if k_user_cf > 0 :\n",
    "        user_knn = NearestNeighbors(n_neighbors=k_user_cf, metric='cosine', algorithm='brute')\n",
    "        user_knn.fit(train_centered.values)\n",
    "        print(f\"User-based CF: k_user_cf={k_user_cf}, n_samples_fit_={user_knn.n_samples_fit_}\")\n",
    "    else:\n",
    "        print(f\"User-based CF: k_user_cf равен 0 (мало уникальных пользователей: {len(train_centered.index)}), модель не будет обучена.\")\n",
    "else:\n",
    "    print(f\"User-based CF: недостаточно данных для обучения (train_centered empty: {train_centered.empty}, users: {len(train_centered.index)}).\")\n",
    "\n",
    "\n",
    "def predict_user_based(u, i, user_knn_model, train_centered_df, train_matrix_df, user_means_series, global_mean):\n",
    "    # ... (код функции predict_user_based без изменений)\n",
    "    if user_knn_model is None or train_centered_df.empty or u not in train_centered_df.index or i not in train_centered_df.columns:\n",
    "        return user_means_series.get(u, global_mean)\n",
    "\n",
    "    u_idx = train_centered_df.index.get_loc(u)\n",
    "    user_vector = train_centered_df.iloc[[u_idx]].values\n",
    "\n",
    "    if not np.any(user_vector): \n",
    "         return user_means_series.get(u, global_mean)\n",
    "\n",
    "    n_samples_in_fit = user_knn_model.n_samples_fit_\n",
    "    n_neighbors_actual = min(user_knn_model.n_neighbors, n_samples_in_fit)\n",
    "\n",
    "\n",
    "    if n_neighbors_actual == 0: \n",
    "        return user_means_series.get(u, global_mean)\n",
    "\n",
    "    dists, neighs_indices = user_knn_model.kneighbors(user_vector, n_neighbors=n_neighbors_actual)\n",
    "    \n",
    "    sims = 1 - dists.flatten()\n",
    "    neigh_user_ids = train_centered_df.index[neighs_indices.flatten()]\n",
    "    \n",
    "    if i not in train_matrix_df.columns: \n",
    "        return user_means_series.get(u, global_mean)\n",
    "\n",
    "    neigh_ratings_for_item_i = train_matrix_df.reindex(neigh_user_ids).get(i, pd.Series(dtype=float)) \n",
    "    \n",
    "    if neigh_ratings_for_item_i.isna().all():\n",
    "         return user_means_series.get(u, global_mean)\n",
    "\n",
    "    valid_ratings_mask = ~neigh_ratings_for_item_i.isna()\n",
    "\n",
    "    if not valid_ratings_mask.any():\n",
    "        return user_means_series.get(u, global_mean)\n",
    "\n",
    "    sims_filtered = sims[valid_ratings_mask]\n",
    "    neigh_ratings_filtered = neigh_ratings_for_item_i[valid_ratings_mask]\n",
    "    neigh_user_ids_filtered = neigh_user_ids[valid_ratings_mask] \n",
    "    \n",
    "    relevant_user_means = user_means_series.reindex(neigh_user_ids_filtered).fillna(global_mean)\n",
    "\n",
    "    numerator = (sims_filtered * (neigh_ratings_filtered - relevant_user_means)).sum()\n",
    "    denominator = np.abs(sims_filtered).sum()\n",
    "\n",
    "    if denominator == 0:\n",
    "        return user_means_series.get(u, global_mean)\n",
    "    \n",
    "    prediction = user_means_series.get(u, global_mean) + numerator / denominator\n",
    "    return np.clip(prediction, MIN_RATING_GLOBAL, MAX_RATING_GLOBAL)\n",
    "\n",
    "\n",
    "y_true_ub, y_pred_ub = [], []\n",
    "if user_knn is not None and not train_centered.empty and not test_df.empty:\n",
    "    for _, row in test_df.iterrows():\n",
    "        y_true_ub.append(row['rating'])\n",
    "        y_pred_ub.append(predict_user_based(row['user_id'], row['vehicle_id'], user_knn, train_centered, train_matrix, user_means, global_mean_rating))\n",
    "    \n",
    "    y_pred_ub = [global_mean_rating if pd.isna(p) else p for p in y_pred_ub] \n",
    "    metrics_ub = evaluate(y_true_ub, y_pred_ub)\n",
    "else:\n",
    "    metrics_ub = {'RMSE': np.nan, 'MAE': np.nan, 'R2': np.nan, 'Accuracy (Rounded)': np.nan} \n",
    "    if not test_df.empty:\n",
    "        y_pred_ub = [global_mean_rating] * len(test_df) \n",
    "        y_true_ub = list(test_df['rating'])\n",
    "    else: \n",
    "        y_pred_ub = []\n",
    "        y_true_ub = []\n",
    "print(\"User-based CF:\", metrics_ub)\n",
    "\n",
    "categorical_features = ['brand','model','body_type','gearbox','drive']\n",
    "numeric_features     = ['year','power_hp','seats', 'price_per_day_usd']\n",
    "actual_categorical_features = [f for f in categorical_features if f in vehicles.columns]\n",
    "actual_numeric_features = [f for f in numeric_features if f in vehicles.columns]\n",
    "\n",
    "X_items_df = pd.DataFrame()\n",
    "item_pipeline = None\n",
    "X_items_transformed = None\n",
    "categorical_features_cb = list(actual_categorical_features) \n",
    "\n",
    "if not reviews.empty and 'vehicle_id' in reviews.columns:\n",
    "    all_vehicle_ids_in_reviews = reviews['vehicle_id'].unique()\n",
    "    if not vehicles.empty and 'vehicle_id' in vehicles.columns:\n",
    "        X_items_df = vehicles[vehicles['vehicle_id'].isin(all_vehicle_ids_in_reviews)].copy()\n",
    "else:\n",
    "    print(\"Content-based: reviews dataframe is empty or missing 'vehicle_id'. X_items_df will be empty.\")\n",
    "\n",
    "if not X_items_df.empty:\n",
    "    X_items_df = X_items_df.set_index('vehicle_id')\n",
    "    \n",
    "    if 'model' in X_items_df.columns and 'model' in categorical_features_cb:\n",
    "        # ИЗМЕНЕНИЕ: Увеличение top_n_models\n",
    "        top_n_models = 50  \n",
    "        model_counts = X_items_df['model'].value_counts()\n",
    "        if not model_counts.empty:\n",
    "            top_models = model_counts.nlargest(min(top_n_models, len(model_counts))).index\n",
    "            X_items_df['model_grouped'] = X_items_df['model'].apply(lambda x: x if x in top_models else 'Other_Model')\n",
    "            categorical_features_cb = [f if f != 'model' else 'model_grouped' for f in categorical_features_cb]\n",
    "        else: \n",
    "            X_items_df['model_grouped'] = 'Other_Model'\n",
    "            categorical_features_cb = [f if f != 'model' else 'model_grouped' for f in categorical_features_cb]\n",
    "    elif 'model_grouped' not in X_items_df.columns:\n",
    "         X_items_df['model_grouped'] = 'Other_Model' \n",
    "         if 'model_grouped' not in categorical_features_cb : \n",
    "            categorical_features_cb = [f for f in categorical_features_cb if f != 'model']\n",
    "            categorical_features_cb.append('model_grouped')\n",
    "\n",
    "    final_cat_features = [f for f in categorical_features_cb if f in X_items_df.columns]\n",
    "    final_num_features = [f for f in actual_numeric_features if f in X_items_df.columns]\n",
    "\n",
    "    for col in final_cat_features:\n",
    "        if X_items_df[col].isnull().any():\n",
    "            mode_val = X_items_df[col].mode()\n",
    "            X_items_df[col] = X_items_df[col].fillna(mode_val[0] if not mode_val.empty else \"Unknown\")\n",
    "    for col in final_num_features:\n",
    "        if X_items_df[col].isnull().any():\n",
    "            X_items_df[col] = X_items_df[col].fillna(X_items_df[col].median())\n",
    "\n",
    "    transformers_list = []\n",
    "    if final_cat_features: \n",
    "        # ИЗМЕНЕНИЕ: Убрали min_frequency\n",
    "        transformers_list.append(('cat', OneHotEncoder(handle_unknown='ignore'), final_cat_features)) \n",
    "    if final_num_features: \n",
    "         transformers_list.append(('num', StandardScaler(), final_num_features))\n",
    "\n",
    "    if transformers_list: \n",
    "        preprocessor = ColumnTransformer(transformers=transformers_list, remainder='drop')\n",
    "        item_pipeline = Pipeline([('prep', preprocessor)])\n",
    "        features_for_transform_df = X_items_df[final_cat_features + final_num_features]\n",
    "        \n",
    "        if not features_for_transform_df.empty:\n",
    "            try:\n",
    "                X_items_transformed = item_pipeline.fit_transform(features_for_transform_df)\n",
    "                print(f\"Content-based: X_items_transformed shape: {X_items_transformed.shape if X_items_transformed is not None else 'None'}\")\n",
    "            except ValueError as e:\n",
    "                print(f\"Ошибка при трансформации признаков для Content-based: {e}\")\n",
    "                X_items_transformed = None \n",
    "        else:\n",
    "            print(\"Content-based: Нет признаков для трансформации или DataFrame признаков пуст.\")\n",
    "            X_items_transformed = None\n",
    "    else:\n",
    "        print(\"Content-based: Нет категориальных или числовых признаков для препроцессора.\")\n",
    "        X_items_transformed = None\n",
    "else:\n",
    "    print(\"Content-based: X_items_df пуст, модель не будет обучена.\")\n",
    "    final_cat_features, final_num_features = [], [] \n",
    "\n",
    "item_knn = None\n",
    "if X_items_transformed is not None and X_items_transformed.shape[0] > 0 and X_items_transformed.shape[1] > 0 : \n",
    "    # ИЗМЕНЕНИЕ: Увеличение k\n",
    "    k_item_cf = 1 \n",
    "    if X_items_transformed.shape[0] > 1: \n",
    "      k_item_cf = min(20, X_items_transformed.shape[0]-1 if X_items_transformed.shape[0]>1 else 1) \n",
    "    \n",
    "    if k_item_cf > 0:\n",
    "        item_knn = NearestNeighbors(n_neighbors=k_item_cf, metric='cosine', algorithm='brute')\n",
    "        item_knn.fit(X_items_transformed)\n",
    "        print(f\"Content-based CF: k_item_cf={k_item_cf}, n_samples_fit_={item_knn.n_samples_fit_}\")\n",
    "    else:\n",
    "        print(f\"Content-based CF: k_item_cf равен 0 (мало образцов: {X_items_transformed.shape[0]}), модель не будет обучена.\")\n",
    "else:\n",
    "    shape_info = X_items_transformed.shape if X_items_transformed is not None else \"None\"\n",
    "    print(f\"Content-based CF: X_items_transformed пуст ({shape_info}), имеет 0 признаков или мало образцов, модель не будет обучена.\")\n",
    "\n",
    "user_rated_history = {} \n",
    "if not train_df.empty and 'user_id' in train_df.columns and 'vehicle_id' in train_df.columns and 'rating' in train_df.columns:\n",
    "    user_rated_history = (\n",
    "        train_df.groupby('user_id')[['vehicle_id', 'rating']]\n",
    "        .apply(lambda g: dict(zip(g['vehicle_id'], g['rating'])))\n",
    "        .to_dict()\n",
    "    )\n",
    "\n",
    "def predict_content_based(u, i, item_knn_model, X_items_indexed_df, X_items_transformed_matrix, user_history_dict, global_mean, user_means_series):\n",
    "    # ... (код функции predict_content_based без изменений)\n",
    "    if item_knn_model is None or X_items_transformed_matrix is None or X_items_indexed_df.empty or i not in X_items_indexed_df.index:\n",
    "        return user_means_series.get(u, global_mean) \n",
    "\n",
    "    if u not in user_history_dict or not user_history_dict[u]: \n",
    "        return user_means_series.get(u, global_mean) \n",
    "\n",
    "    try:\n",
    "        item_idx_in_transformed = X_items_indexed_df.index.get_loc(i)\n",
    "    except KeyError: \n",
    "        return user_means_series.get(u, global_mean)\n",
    "\n",
    "    if item_idx_in_transformed >= X_items_transformed_matrix.shape[0]:\n",
    "        # print(f\"Warning CB: item_idx_in_transformed {item_idx_in_transformed} out of bounds for X_items_transformed_matrix with shape {X_items_transformed_matrix.shape}\")\n",
    "        return user_means_series.get(u, global_mean)\n",
    "\n",
    "    item_vector = X_items_transformed_matrix[item_idx_in_transformed]\n",
    "    if item_vector.ndim == 1: \n",
    "        item_vector = item_vector.reshape(1, -1)\n",
    "    \n",
    "    n_samples_in_fit = item_knn_model.n_samples_fit_\n",
    "    n_neighbors_actual = min(item_knn_model.n_neighbors, n_samples_in_fit)\n",
    "    if n_neighbors_actual == 0:\n",
    "        return user_means_series.get(u, global_mean) \n",
    "\n",
    "    dists, neighs_indices = item_knn_model.kneighbors(item_vector, n_neighbors=n_neighbors_actual)\n",
    "    similar_item_ids = X_items_indexed_df.index[neighs_indices.flatten()] \n",
    "    \n",
    "    user_ratings_for_similar_items = []\n",
    "    user_specific_history = user_history_dict[u] \n",
    "    for sim_item_id in similar_item_ids:\n",
    "        if sim_item_id == i: continue \n",
    "        if sim_item_id in user_specific_history:\n",
    "            user_ratings_for_similar_items.append(user_specific_history[sim_item_id])\n",
    "            \n",
    "    if not user_ratings_for_similar_items: \n",
    "        all_user_ratings = list(user_specific_history.values())\n",
    "        return np.mean(all_user_ratings) if all_user_ratings else user_means_series.get(u, global_mean)\n",
    "    \n",
    "    prediction = np.mean(user_ratings_for_similar_items)\n",
    "    return np.clip(prediction, MIN_RATING_GLOBAL, MAX_RATING_GLOBAL)\n",
    "\n",
    "\n",
    "y_true_cb, y_pred_cb = [], []\n",
    "if item_knn is not None and X_items_transformed is not None and not X_items_df.empty and not test_df.empty:\n",
    "    for _, row in test_df.iterrows():\n",
    "        y_true_cb.append(row['rating'])\n",
    "        y_pred_cb.append(predict_content_based(row['user_id'], row['vehicle_id'], item_knn, X_items_df, X_items_transformed, user_rated_history, global_mean_rating, user_means))\n",
    "    \n",
    "    y_pred_cb = [global_mean_rating if pd.isna(p) else p for p in y_pred_cb]\n",
    "    metrics_cb = evaluate(y_true_cb, y_pred_cb)\n",
    "else:\n",
    "    metrics_cb = {'RMSE': np.nan, 'MAE': np.nan, 'R2': np.nan, 'Accuracy (Rounded)': np.nan} \n",
    "    if not test_df.empty:\n",
    "        y_pred_cb = [global_mean_rating] * len(test_df)\n",
    "        y_true_cb = list(test_df['rating']) \n",
    "    else:\n",
    "        y_pred_cb = []\n",
    "        y_true_cb = []\n",
    "print(\"Content-based CF:\", metrics_cb)\n",
    "\n",
    "\n",
    "print(\"\\n--- Подбор alpha для гибридной модели ---\")\n",
    "alphas = np.arange(0, 1.01, 0.1)\n",
    "hybrid_metrics_history = []\n",
    "best_hybrid_metrics = {'RMSE': float('inf'), 'MAE': float('inf'), 'R2': -float('inf'), 'Accuracy (Rounded)': -float('inf')}\n",
    "best_alpha = 0.5 \n",
    "\n",
    "y_true_hybrid = y_true_ub \n",
    "if not y_true_hybrid: \n",
    "    print(\"Нет данных для оценки гибридной модели (test_df пуст или User-based не дал y_true).\")\n",
    "else:\n",
    "    if len(y_pred_ub) != len(y_true_hybrid):\n",
    "        print(f\"Warning: Длина y_pred_ub ({len(y_pred_ub)}) != y_true_hybrid ({len(y_true_hybrid)}). Заполняем global_mean_rating.\")\n",
    "        y_pred_ub = [global_mean_rating] * len(y_true_hybrid)\n",
    "    if len(y_pred_cb) != len(y_true_hybrid):\n",
    "        print(f\"Warning: Длина y_pred_cb ({len(y_pred_cb)}) != y_true_hybrid ({len(y_true_hybrid)}). Заполняем global_mean_rating.\")\n",
    "        y_pred_cb = [global_mean_rating] * len(y_true_hybrid)\n",
    "\n",
    "    for alpha_val in alphas:\n",
    "        y_pred_hybrid = []\n",
    "        for idx in range(len(y_true_hybrid)):\n",
    "            ub_pred_val = y_pred_ub[idx]\n",
    "            cb_pred_val = y_pred_cb[idx]\n",
    "            if pd.isna(ub_pred_val): ub_pred_val = global_mean_rating\n",
    "            if pd.isna(cb_pred_val): cb_pred_val = global_mean_rating\n",
    "            pred_h = alpha_val * ub_pred_val + (1 - alpha_val) * cb_pred_val\n",
    "            y_pred_hybrid.append(np.clip(pred_h, MIN_RATING_GLOBAL, MAX_RATING_GLOBAL))\n",
    "        \n",
    "        current_metrics_hybrid = evaluate(y_true_hybrid, y_pred_hybrid)\n",
    "        hybrid_metrics_history.append({'alpha': alpha_val, **current_metrics_hybrid})\n",
    "        \n",
    "        if 'RMSE' in current_metrics_hybrid and not pd.isna(current_metrics_hybrid['RMSE']):\n",
    "             print(f\"Alpha: {alpha_val:.1f}, RMSE: {current_metrics_hybrid['RMSE']:.4f}, MAE: {current_metrics_hybrid['MAE']:.4f}, R2: {current_metrics_hybrid['R2']:.4f}, Acc (rnd): {current_metrics_hybrid.get('Accuracy (Rounded)', np.nan):.4f}\")\n",
    "             if current_metrics_hybrid['RMSE'] < best_hybrid_metrics.get('RMSE', float('inf')): \n",
    "                best_hybrid_metrics = current_metrics_hybrid \n",
    "                best_alpha = alpha_val\n",
    "        else:\n",
    "            print(f\"Alpha: {alpha_val:.1f}, Метрики: NaN\")\n",
    "\n",
    "    if pd.isna(best_hybrid_metrics.get('RMSE', np.nan)): \n",
    "        print(\"\\nНе удалось найти валидные метрики для гибридной модели. Alpha не определен.\")\n",
    "        best_alpha = 0.5 \n",
    "    else:\n",
    "        print(f\"\\nЛучший alpha для гибридной модели: {best_alpha:.1f}\")\n",
    "        print(f\"Лучшие метрики для гибридной модели (α={best_alpha:.1f}): {best_hybrid_metrics}\")\n",
    "\n",
    "    alpha_results_df = pd.DataFrame(hybrid_metrics_history)\n",
    "    if not alpha_results_df.empty and 'RMSE' in alpha_results_df.columns:\n",
    "        alpha_results_df_cleaned = alpha_results_df.dropna(subset=['RMSE', 'MAE', 'R2', 'Accuracy (Rounded)'], how='any') \n",
    "        if not alpha_results_df_cleaned.empty:\n",
    "            plt.figure(figsize=(18, 5)) \n",
    "            plt.subplot(1, 3, 1); plt.plot(alpha_results_df_cleaned['alpha'], alpha_results_df_cleaned['RMSE'], marker='o', label='RMSE')\n",
    "            plt.plot(alpha_results_df_cleaned['alpha'], alpha_results_df_cleaned['MAE'], marker='s', label='MAE')\n",
    "            plt.xlabel('Alpha'); plt.ylabel('Error Value'); plt.title('RMSE & MAE vs. Alpha'); plt.legend(); plt.grid(True)\n",
    "            plt.subplot(1, 3, 2); plt.plot(alpha_results_df_cleaned['alpha'], alpha_results_df_cleaned['R2'], marker='d', label='R2 Score', color='green')\n",
    "            plt.xlabel('Alpha'); plt.ylabel('R2 Score'); plt.title('R2 Score vs. Alpha'); plt.legend(); plt.grid(True)\n",
    "            plt.subplot(1, 3, 3); plt.plot(alpha_results_df_cleaned['alpha'], alpha_results_df_cleaned['Accuracy (Rounded)'], marker='*', label='Accuracy (Rounded)', color='purple')\n",
    "            plt.xlabel('Alpha'); plt.ylabel('Accuracy (Rounded)'); plt.title('Accuracy (Rounded) vs. Alpha'); plt.legend(); plt.grid(True)\n",
    "            plt.tight_layout(); plt.show() \n",
    "        else: print(\"Недостаточно валидных данных для построения графика Alpha vs Metrics.\")\n",
    "    else: print(\"Нет данных для визуализации Alpha vs Metrics.\")\n",
    "\n",
    "\n",
    "artifacts_to_save = {\n",
    "    'global_mean_rating': global_mean_rating, 'MIN_RATING': MIN_RATING_GLOBAL, \n",
    "    'MAX_RATING': MAX_RATING_GLOBAL, \n",
    "    'best_alpha_hybrid': best_alpha if 'RMSE' in best_hybrid_metrics and not pd.isna(best_hybrid_metrics.get('RMSE')) else 0.5\n",
    "}\n",
    "if user_knn and not train_centered.empty:\n",
    "    artifacts_to_save.update({\n",
    "        'user_knn': user_knn, 'train_centered_index': train_centered.index.tolist(), \n",
    "        'train_centered_columns': train_centered.columns.tolist(), 'user_means': user_means, \n",
    "        'train_matrix_columns': train_matrix.columns.tolist() if not train_matrix.empty else [],\n",
    "        'train_matrix_index': train_matrix.index.tolist() if not train_matrix.empty else []\n",
    "    })\n",
    "if item_knn and item_pipeline and X_items_transformed is not None and not X_items_df.empty:\n",
    "    artifacts_to_save.update({\n",
    "        'item_knn': item_knn, 'item_pipeline': item_pipeline, \n",
    "        'X_items_df_index': X_items_df.index.tolist(), \n",
    "        'X_items_df_used_cat_features': final_cat_features,\n",
    "        'X_items_df_used_num_features': final_num_features,\n",
    "        'user_rated_history': user_rated_history\n",
    "    })\n",
    "\n",
    "save_directory = r\"C:\\Users\\Kirill\\Desktop\\Диплом\\backend\\models\"\n",
    "file_name = \"recommendation_artifacts_csv.joblib\"\n",
    "full_save_path = os.path.join(save_directory, file_name)\n",
    "os.makedirs(save_directory, exist_ok=True) \n",
    "try:\n",
    "    joblib.dump(artifacts_to_save, full_save_path)\n",
    "    print(f\"\\nАртефакты модели сохранены в {full_save_path}\")\n",
    "    print(\"Сохраненные артефакты:\", list(artifacts_to_save.keys()))\n",
    "except Exception as e: print(f\"Ошибка при сохранении артефактов: {e}\")\n",
    "\n",
    "\n",
    "model_names = ['User-based CF', 'Content-based CF', f'Hybrid CF (α={best_alpha:.1f})']\n",
    "rmse_values = [metrics_ub.get('RMSE', np.nan), metrics_cb.get('RMSE', np.nan), best_hybrid_metrics.get('RMSE', np.nan)]\n",
    "mae_values  = [metrics_ub.get('MAE', np.nan), metrics_cb.get('MAE', np.nan), best_hybrid_metrics.get('MAE', np.nan)]\n",
    "r2_values   = [metrics_ub.get('R2', np.nan), metrics_cb.get('R2', np.nan), best_hybrid_metrics.get('R2', np.nan)]\n",
    "accuracy_values = [metrics_ub.get('Accuracy (Rounded)', np.nan), metrics_cb.get('Accuracy (Rounded)', np.nan), best_hybrid_metrics.get('Accuracy (Rounded)', np.nan)] \n",
    "\n",
    "valid_metric_indices = [\n",
    "    i for i, rmse in enumerate(rmse_values) if\n",
    "    all(pd.notna(val) for val in [rmse, mae_values[i], r2_values[i], accuracy_values[i]])\n",
    "]\n",
    "\n",
    "if valid_metric_indices:\n",
    "    names = [model_names[i] for i in valid_metric_indices]\n",
    "    rmses = [rmse_values[i] for i in valid_metric_indices]\n",
    "    maes  = [mae_values[i]  for i in valid_metric_indices]\n",
    "    r2s   = [r2_values[i]   for i in valid_metric_indices]\n",
    "    accs  = [accuracy_values[i] for i in valid_metric_indices] \n",
    "\n",
    "    if names: \n",
    "        x = np.arange(len(names)); width = 0.20 \n",
    "        fig, ax1 = plt.subplots(figsize=(16, 8)) \n",
    "        rects1 = ax1.bar(x - width*1.5, rmses, width, label='RMSE', color='cornflowerblue')\n",
    "        rects2 = ax1.bar(x - width*0.5, maes, width, label='MAE', color='lightcoral')\n",
    "        ax1.set_ylabel('Error Value (RMSE, MAE)'); ax1.set_title('Сравнение метрик моделей')\n",
    "        ax1.set_xticks(x); ax1.set_xticklabels(names, rotation=15, ha=\"right\")\n",
    "        ax1.legend(loc='upper left'); ax1.grid(axis='y', linestyle='--', alpha=0.7)\n",
    "\n",
    "        def autolabel(rects, ax_target, is_score=False):\n",
    "            for rect in rects:\n",
    "                height = rect.get_height()\n",
    "                if pd.isna(height): continue \n",
    "                offset_points = 3; va = 'bottom'\n",
    "                if is_score and height < 0: offset_points = -12; va = 'top'\n",
    "                ax_target.annotate(f'{height:.3f}',\n",
    "                             xy=(rect.get_x() + rect.get_width() / 2, height),\n",
    "                             xytext=(0, offset_points), textcoords=\"offset points\",\n",
    "                             ha='center', va=va, fontsize=8)\n",
    "        autolabel(rects1, ax1); autolabel(rects2, ax1)\n",
    "        ax2 = ax1.twinx()\n",
    "        rects3 = ax2.bar(x + width*0.5, r2s, width, label='R2 Score', color='mediumseagreen')\n",
    "        rects4 = ax2.bar(x + width*1.5, accs, width, label='Accuracy (Rounded)', color='gold') \n",
    "        ax2.set_ylabel('Score (R2, Accuracy)')\n",
    "        handles, labels = [], []\n",
    "        for r_list in [rects3, rects4]:\n",
    "            if r_list and len(r_list) > 0 : handles.append(r_list[0]); labels.append(r_list[0].get_label())\n",
    "        if handles: ax2.legend(handles, labels, loc='upper right')\n",
    "        all_scores = [s for s_list in [r2s, accs] for s in s_list if pd.notna(s)]\n",
    "        if all_scores:\n",
    "            min_s, max_s = min(all_scores), max(all_scores)\n",
    "            ymin_ax2 = min(min_s - 0.1 * abs(min_s if min_s !=0 else 0.1) , -0.05 if min_s >=0 else min_s - 0.1)\n",
    "            ymax_ax2 = max(max_s + 0.1 * abs(max_s if max_s !=0 else 0.1), 0.05  if max_s <=0 else max_s + 0.1)\n",
    "            ymin_ax2 = max(ymin_ax2, -1.1); ymax_ax2 = min(ymax_ax2, 1.1)  \n",
    "            if ymin_ax2 >= ymax_ax2: ymax_ax2 = ymin_ax2 + 0.2 if ymin_ax2 < 0.85 else 1.05\n",
    "            ax2.set_ylim([ymin_ax2, ymax_ax2])\n",
    "        autolabel(rects3, ax2, is_score=True); autolabel(rects4, ax2, is_score=True) \n",
    "        fig.tight_layout(); plt.show() \n",
    "    else: print(\"Нет валидных данных для построения итогового графика.\")\n",
    "else: print(\"Нет данных для построения итогового графика (все метрики NaN).\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "982014b4-1a80-4d3b-a0b0-8ddc2caf63a9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}

```



